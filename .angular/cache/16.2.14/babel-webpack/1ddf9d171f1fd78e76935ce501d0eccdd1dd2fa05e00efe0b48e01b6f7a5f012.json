{"ast":null,"code":"import { BehaviorSubject, of, tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:3000/api/auth';\n    // private currentUser: any;\n    this.currentUserSubject = new BehaviorSubject(null);\n    this.currentUser$ = this.currentUserSubject.asObservable();\n  }\n  // for login\n  login(credentials) {\n    return this.http.post(`${this.apiUrl}/login`, credentials).pipe(tap(user => this.currentUserSubject.next(user)));\n  }\n  // for signup\n  signup(user) {\n    return this.http.post(`${this.apiUrl}/signup`, user);\n  }\n  // for logout\n  logout() {\n    this.currentUserSubject.next(null);\n    return of(null);\n  }\n  getCurrentUser() {\n    return this.currentUserSubject.value;\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["BehaviorSubject","of","tap","AuthService","constructor","http","apiUrl","currentUserSubject","currentUser$","asObservable","login","credentials","post","pipe","user","next","signup","logout","getCurrentUser","value","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\VI_Pranav\\Desktop\\food-delivery-app\\src\\app\\auth\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable, of, tap } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private apiUrl = 'http://localhost:3000/api/auth';\n  // private currentUser: any;\n  private currentUserSubject = new BehaviorSubject<any>(null);\n  public currentUser$ = this.currentUserSubject.asObservable();\n  \n  constructor(public http: HttpClient) { }\n\n  // for login\n  public login(credentials: any): Observable<any> {\n    return this.http.post(`${this.apiUrl}/login`, credentials).pipe(\n      tap(user => this.currentUserSubject.next(user))\n    );\n  }\n\n  // for signup\n  public signup(user: any): Observable<any> {\n    return this.http.post(`${this.apiUrl}/signup`, user);\n  }\n\n  // for logout\n  public logout(): Observable<any> {\n    this.currentUserSubject.next(null);\n    return of(null);\n  }\n\n  public getCurrentUser(): any {\n    return this.currentUserSubject.value;\n  }\n\n \n}\n"],"mappings":"AAEA,SAASA,eAAe,EAAcC,EAAE,EAAEC,GAAG,QAAQ,MAAM;;;AAK3D,OAAM,MAAOC,WAAW;EAMtBC,YAAmBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IALf,KAAAC,MAAM,GAAG,gCAAgC;IACjD;IACQ,KAAAC,kBAAkB,GAAG,IAAIP,eAAe,CAAM,IAAI,CAAC;IACpD,KAAAQ,YAAY,GAAG,IAAI,CAACD,kBAAkB,CAACE,YAAY,EAAE;EAErB;EAEvC;EACOC,KAAKA,CAACC,WAAgB;IAC3B,OAAO,IAAI,CAACN,IAAI,CAACO,IAAI,CAAC,GAAG,IAAI,CAACN,MAAM,QAAQ,EAAEK,WAAW,CAAC,CAACE,IAAI,CAC7DX,GAAG,CAACY,IAAI,IAAI,IAAI,CAACP,kBAAkB,CAACQ,IAAI,CAACD,IAAI,CAAC,CAAC,CAChD;EACH;EAEA;EACOE,MAAMA,CAACF,IAAS;IACrB,OAAO,IAAI,CAACT,IAAI,CAACO,IAAI,CAAC,GAAG,IAAI,CAACN,MAAM,SAAS,EAAEQ,IAAI,CAAC;EACtD;EAEA;EACOG,MAAMA,CAAA;IACX,IAAI,CAACV,kBAAkB,CAACQ,IAAI,CAAC,IAAI,CAAC;IAClC,OAAOd,EAAE,CAAC,IAAI,CAAC;EACjB;EAEOiB,cAAcA,CAAA;IACnB,OAAO,IAAI,CAACX,kBAAkB,CAACY,KAAK;EACtC;EAAC,QAAAC,CAAA,G;qBA5BUjB,WAAW,EAAAkB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAXtB,WAAW;IAAAuB,OAAA,EAAXvB,WAAW,CAAAwB,IAAA;IAAAC,UAAA,EAFV;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}