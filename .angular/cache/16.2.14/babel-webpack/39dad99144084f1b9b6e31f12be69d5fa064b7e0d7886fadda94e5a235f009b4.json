{"ast":null,"code":"import { BehaviorSubject, of, tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:3000/api/auth';\n    this.currentUserSubject = new BehaviorSubject(null);\n    this.currentUser$ = this.currentUserSubject.asObservable();\n    const storedUser = JSON.parse(localStorage.getItem('currentUser') || 'null');\n    if (storedUser) {\n      this.currentUserSubject.next(storedUser);\n    }\n  }\n  // for login\n  login(credentials) {\n    return this.http.post(`${this.apiUrl}/login`, credentials).pipe(tap(user => {\n      this.currentUserSubject.next(user);\n      localStorage.setItem('currentUser', JSON.stringify(user));\n    }));\n  }\n  // for signup\n  signup(user) {\n    return this.http.post(`${this.apiUrl}/signup`, user).pipe(tap(user => {\n      this.currentUserSubject.next(user);\n      localStorage.setItem('currentUser', JSON.stringify(user));\n    }));\n  }\n  // for logout\n  logout() {\n    this.currentUserSubject.next(null);\n    localStorage.removeItem('currentUser');\n    return of(null);\n  }\n  // for fetching order history\n  getOrderHistory() {\n    const currentUser = this.getCurrentUser();\n    if (currentUser) {\n      return this.http.get(`${this.apiUrl}/orders/${currentUser.id}`);\n    }\n    return of(null);\n  }\n  getCurrentUser() {\n    return this.currentUserSubject.value;\n  }\n  // update the user profile\n  updateProfile(userId, userProfile) {\n    return this.http.put(`${this.apiUrl}/profile/${userId}`, userProfile).pipe(tap(updatedUser => {\n      this.currentUserSubject.next(updatedUser);\n      localStorage.setItem('currentUser', JSON.stringify(updatedUser));\n    }));\n  }\n  // for updating the profile image\n  updateProfileImage(userId, image) {\n    return this.http.put(`${this.apiUrl}/profile/${userId}/image`, image).pipe(tap(updatedUser => {\n      this.currentUserSubject.next(updatedUser);\n      localStorage.setItem('currentUser', JSON.stringify(updatedUser));\n    }));\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["BehaviorSubject","of","tap","AuthService","constructor","http","apiUrl","currentUserSubject","currentUser$","asObservable","storedUser","JSON","parse","localStorage","getItem","next","login","credentials","post","pipe","user","setItem","stringify","signup","logout","removeItem","getOrderHistory","currentUser","getCurrentUser","get","id","value","updateProfile","userId","userProfile","put","updatedUser","updateProfileImage","image","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\VI_Pranav\\Desktop\\food-delivery-app\\src\\app\\auth\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable, of, tap } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  public apiUrl = 'http://localhost:3000/api/auth';\n  public currentUserSubject = new BehaviorSubject<any>(null);\n  public currentUser$: Observable<any> = this.currentUserSubject.asObservable();\n  \n  constructor(public http: HttpClient) { \n    const storedUser = JSON.parse(localStorage.getItem('currentUser') || 'null');\n    if (storedUser) {\n      this.currentUserSubject.next(storedUser);\n    }\n   }\n\n  // for login\n  public login(credentials: any): Observable<any> {\n    return this.http.post(`${this.apiUrl}/login`, credentials).pipe(\n      tap(user => {\n        this.currentUserSubject.next(user);\n        localStorage.setItem('currentUser', JSON.stringify(user));\n      })\n    );\n  }\n\n  // for signup\n  public signup(user: any): Observable<any> {\n    return this.http.post(`${this.apiUrl}/signup`, user).pipe(\n      tap(user => {\n        this.currentUserSubject.next(user);\n        localStorage.setItem('currentUser', JSON.stringify(user));\n      })\n    );\n  }\n\n  // for logout\n  public logout(): Observable<any> {\n    this.currentUserSubject.next(null);\n    localStorage.removeItem('currentUser');\n    return of(null);\n  }\n\n  // for fetching order history\n  public getOrderHistory(): Observable<any>{\n    const currentUser = this.getCurrentUser();\n    if (currentUser) {\n      return this.http.get(`${this.apiUrl}/orders/${currentUser.id}`);\n    }\n    return of(null);\n  }\n  \n  public getCurrentUser(): any {\n    return this.currentUserSubject.value;\n  }\n\n  // update the user profile\n  public updateProfile(userId: string, userProfile: any): Observable<any>{\n    return this.http.put(`${this.apiUrl}/profile/${userId}`, userProfile).pipe(\n      tap((updatedUser) => {\n        this.currentUserSubject.next(updatedUser);\n        localStorage.setItem('currentUser', JSON.stringify(updatedUser));\n      })\n    );\n  }\n\n  // for updating the profile image\n  public updateProfileImage(userId: string, image: any): Observable<any>{\n    return this.http.put(`${this.apiUrl}/profile/${userId}/image`, image).pipe(\n      tap((updatedUser) => {\n        this.currentUserSubject.next(updatedUser);\n        localStorage.setItem('currentUser', JSON.stringify(updatedUser));\n      })\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}