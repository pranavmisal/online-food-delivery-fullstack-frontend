{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { APP_BOOTSTRAP_LISTENER, PLATFORM_ID, NgModule, Injectable, InjectionToken, Inject, inject, Directive } from '@angular/core';\nimport { isPlatformBrowser, DOCUMENT, isPlatformServer } from '@angular/common';\nimport { BehaviorSubject, Observable, merge, Subject, asapScheduler, of, fromEvent } from 'rxjs';\nimport { applyCssPrefixes, extendObject, buildLayoutCSS } from '@angular/flex-layout/_private-utils';\nimport { filter, tap, debounceTime, switchMap, map, distinctUntilChanged, takeUntil, take } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Find all of the server-generated stylings, if any, and remove them\n * This will be in the form of inline classes and the style block in the\n * head of the DOM\n */\nfunction removeStyles(_document, platformId) {\n  return () => {\n    if (isPlatformBrowser(platformId)) {\n      const elements = Array.from(_document.querySelectorAll(`[class*=${CLASS_NAME}]`));\n      // RegExp constructor should only be used if passing a variable to the constructor.\n      // When using static regular expression it is more performant to use reg exp literal.\n      // This is also needed to provide Safari 9 compatibility, please see\n      // https://stackoverflow.com/questions/37919802 for more discussion.\n      const classRegex = /\\bflex-layout-.+?\\b/g;\n      elements.forEach(el => {\n        el.classList.contains(`${CLASS_NAME}ssr`) && el.parentNode ? el.parentNode.removeChild(el) : el.className.replace(classRegex, '');\n      });\n    }\n  };\n}\n/**\n *  Provider to remove SSR styles on the browser\n */\nconst BROWSER_PROVIDER = {\n  provide: APP_BOOTSTRAP_LISTENER,\n  useFactory: removeStyles,\n  deps: [DOCUMENT, PLATFORM_ID],\n  multi: true\n};\nconst CLASS_NAME = 'flex-layout-';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * *****************************************************************\n * Define module for common Angular Layout utilities\n * *****************************************************************\n */\nclass CoreModule {}\nCoreModule.ɵfac = function CoreModule_Factory(t) {\n  return new (t || CoreModule)();\n};\nCoreModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: CoreModule\n});\nCoreModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [BROWSER_PROVIDER]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CoreModule, [{\n    type: NgModule,\n    args: [{\n      providers: [BROWSER_PROVIDER]\n    }]\n  }], null, null);\n})();\n\n/**\n * Class instances emitted [to observers] for each mql notification\n */\nclass MediaChange {\n  /**\n   * @param matches whether the mediaQuery is currently activated\n   * @param mediaQuery e.g. (min-width: 600px) and (max-width: 959px)\n   * @param mqAlias e.g. gt-sm, md, gt-lg\n   * @param suffix e.g. GtSM, Md, GtLg\n   * @param priority the priority of activation for the given breakpoint\n   */\n  constructor(matches = false, mediaQuery = 'all', mqAlias = '', suffix = '', priority = 0) {\n    this.matches = matches;\n    this.mediaQuery = mediaQuery;\n    this.mqAlias = mqAlias;\n    this.suffix = suffix;\n    this.priority = priority;\n    this.property = '';\n  }\n  /** Create an exact copy of the MediaChange */\n  clone() {\n    return new MediaChange(this.matches, this.mediaQuery, this.mqAlias, this.suffix);\n  }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Utility to emulate a CSS stylesheet\n *\n * This utility class stores all of the styles for a given HTML element\n * as a readonly `stylesheet` map.\n */\nclass StylesheetMap {\n  constructor() {\n    this.stylesheet = new Map();\n  }\n  /**\n   * Add an individual style to an HTML element\n   */\n  addStyleToElement(element, style, value) {\n    const stylesheet = this.stylesheet.get(element);\n    if (stylesheet) {\n      stylesheet.set(style, value);\n    } else {\n      this.stylesheet.set(element, new Map([[style, value]]));\n    }\n  }\n  /**\n   * Clear the virtual stylesheet\n   */\n  clearStyles() {\n    this.stylesheet.clear();\n  }\n  /**\n   * Retrieve a given style for an HTML element\n   */\n  getStyleForElement(el, styleName) {\n    const styles = this.stylesheet.get(el);\n    let value = '';\n    if (styles) {\n      const style = styles.get(styleName);\n      if (typeof style === 'number' || typeof style === 'string') {\n        value = style + '';\n      }\n    }\n    return value;\n  }\n}\nStylesheetMap.ɵfac = function StylesheetMap_Factory(t) {\n  return new (t || StylesheetMap)();\n};\nStylesheetMap.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: StylesheetMap,\n  factory: StylesheetMap.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(StylesheetMap, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst DEFAULT_CONFIG = {\n  addFlexToParent: true,\n  addOrientationBps: false,\n  disableDefaultBps: false,\n  disableVendorPrefixes: false,\n  serverLoaded: false,\n  useColumnBasisZero: true,\n  printWithBreakpoints: [],\n  mediaTriggerAutoRestore: true,\n  ssrObserveBreakpoints: [],\n  // This is disabled by default because otherwise the multiplier would\n  // run for all users, regardless of whether they're using this feature.\n  // Instead, we disable it by default, which requires this ugly cast.\n  multiplier: undefined,\n  defaultUnit: 'px',\n  detectLayoutDisplay: false\n};\nconst LAYOUT_CONFIG = new InjectionToken('Flex Layout token, config options for the library', {\n  providedIn: 'root',\n  factory: () => DEFAULT_CONFIG\n});\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Token that is provided to tell whether the FlexLayoutServerModule\n * has been included in the bundle\n *\n * NOTE: This can be manually provided to disable styles when using SSR\n */\nconst SERVER_TOKEN = new InjectionToken('FlexLayoutServerLoaded', {\n  providedIn: 'root',\n  factory: () => false\n});\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst BREAKPOINT = new InjectionToken('Flex Layout token, collect all breakpoints into one provider', {\n  providedIn: 'root',\n  factory: () => null\n});\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * For the specified MediaChange, make sure it contains the breakpoint alias\n * and suffix (if available).\n */\nfunction mergeAlias(dest, source) {\n  dest = dest?.clone() ?? new MediaChange();\n  if (source) {\n    dest.mqAlias = source.alias;\n    dest.mediaQuery = source.mediaQuery;\n    dest.suffix = source.suffix;\n    dest.priority = source.priority;\n  }\n  return dest;\n}\n\n/** A class that encapsulates CSS style generation for common directives */\nclass StyleBuilder {\n  constructor() {\n    /** Whether to cache the generated output styles */\n    this.shouldCache = true;\n  }\n  /**\n   * Run a side effect computation given the input string and the computed styles\n   * from the build task and the host configuration object\n   * NOTE: This should be a no-op unless an algorithm is provided in a subclass\n   */\n  sideEffect(_input, _styles, _parent) {}\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass StyleUtils {\n  constructor(_serverStylesheet, _serverModuleLoaded, _platformId, layoutConfig) {\n    this._serverStylesheet = _serverStylesheet;\n    this._serverModuleLoaded = _serverModuleLoaded;\n    this._platformId = _platformId;\n    this.layoutConfig = layoutConfig;\n  }\n  /**\n   * Applies styles given via string pair or object map to the directive element\n   */\n  applyStyleToElement(element, style, value = null) {\n    let styles = {};\n    if (typeof style === 'string') {\n      styles[style] = value;\n      style = styles;\n    }\n    styles = this.layoutConfig.disableVendorPrefixes ? style : applyCssPrefixes(style);\n    this._applyMultiValueStyleToElement(styles, element);\n  }\n  /**\n   * Applies styles given via string pair or object map to the directive's element\n   */\n  applyStyleToElements(style, elements = []) {\n    const styles = this.layoutConfig.disableVendorPrefixes ? style : applyCssPrefixes(style);\n    elements.forEach(el => {\n      this._applyMultiValueStyleToElement(styles, el);\n    });\n  }\n  /**\n   * Determine the DOM element's Flexbox flow (flex-direction)\n   *\n   * Check inline style first then check computed (stylesheet) style\n   */\n  getFlowDirection(target) {\n    const query = 'flex-direction';\n    let value = this.lookupStyle(target, query);\n    const hasInlineValue = this.lookupInlineStyle(target, query) || isPlatformServer(this._platformId) && this._serverModuleLoaded ? value : '';\n    return [value || 'row', hasInlineValue];\n  }\n  hasWrap(target) {\n    const query = 'flex-wrap';\n    return this.lookupStyle(target, query) === 'wrap';\n  }\n  /**\n   * Find the DOM element's raw attribute value (if any)\n   */\n  lookupAttributeValue(element, attribute) {\n    return element.getAttribute(attribute) ?? '';\n  }\n  /**\n   * Find the DOM element's inline style value (if any)\n   */\n  lookupInlineStyle(element, styleName) {\n    return isPlatformBrowser(this._platformId) ? element.style.getPropertyValue(styleName) : getServerStyle(element, styleName);\n  }\n  /**\n   * Determine the inline or inherited CSS style\n   * NOTE: platform-server has no implementation for getComputedStyle\n   */\n  lookupStyle(element, styleName, inlineOnly = false) {\n    let value = '';\n    if (element) {\n      let immediateValue = value = this.lookupInlineStyle(element, styleName);\n      if (!immediateValue) {\n        if (isPlatformBrowser(this._platformId)) {\n          if (!inlineOnly) {\n            value = getComputedStyle(element).getPropertyValue(styleName);\n          }\n        } else {\n          if (this._serverModuleLoaded) {\n            value = this._serverStylesheet.getStyleForElement(element, styleName);\n          }\n        }\n      }\n    }\n    // Note: 'inline' is the default of all elements, unless UA stylesheet overrides;\n    //       in which case getComputedStyle() should determine a valid value.\n    return value ? value.trim() : '';\n  }\n  /**\n   * Applies the styles to the element. The styles object map may contain an array of values\n   * Each value will be added as element style\n   * Keys are sorted to add prefixed styles (like -webkit-x) first, before the standard ones\n   */\n  _applyMultiValueStyleToElement(styles, element) {\n    Object.keys(styles).sort().forEach(key => {\n      const el = styles[key];\n      const values = Array.isArray(el) ? el : [el];\n      values.sort();\n      for (let value of values) {\n        value = value ? value + '' : '';\n        if (isPlatformBrowser(this._platformId) || !this._serverModuleLoaded) {\n          isPlatformBrowser(this._platformId) ? element.style.setProperty(key, value) : setServerStyle(element, key, value);\n        } else {\n          this._serverStylesheet.addStyleToElement(element, key, value);\n        }\n      }\n    });\n  }\n}\nStyleUtils.ɵfac = function StyleUtils_Factory(t) {\n  return new (t || StyleUtils)(i0.ɵɵinject(StylesheetMap), i0.ɵɵinject(SERVER_TOKEN), i0.ɵɵinject(PLATFORM_ID), i0.ɵɵinject(LAYOUT_CONFIG));\n};\nStyleUtils.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: StyleUtils,\n  factory: StyleUtils.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(StyleUtils, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: StylesheetMap\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [SERVER_TOKEN]\n      }]\n    }, {\n      type: Object,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [LAYOUT_CONFIG]\n      }]\n    }];\n  }, null);\n})();\nfunction getServerStyle(element, styleName) {\n  const styleMap = readStyleAttribute(element);\n  return styleMap[styleName] ?? '';\n}\nfunction setServerStyle(element, styleName, styleValue) {\n  styleName = styleName.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n  const styleMap = readStyleAttribute(element);\n  styleMap[styleName] = styleValue ?? '';\n  writeStyleAttribute(element, styleMap);\n}\nfunction writeStyleAttribute(element, styleMap) {\n  let styleAttrValue = '';\n  for (const key in styleMap) {\n    const newValue = styleMap[key];\n    if (newValue) {\n      styleAttrValue += `${key}:${styleMap[key]};`;\n    }\n  }\n  element.setAttribute('style', styleAttrValue);\n}\nfunction readStyleAttribute(element) {\n  const styleMap = {};\n  const styleAttribute = element.getAttribute('style');\n  if (styleAttribute) {\n    const styleList = styleAttribute.split(/;+/g);\n    for (let i = 0; i < styleList.length; i++) {\n      const style = styleList[i].trim();\n      if (style.length > 0) {\n        const colonIndex = style.indexOf(':');\n        if (colonIndex === -1) {\n          throw new Error(`Invalid CSS style: ${style}`);\n        }\n        const name = style.substr(0, colonIndex).trim();\n        styleMap[name] = style.substr(colonIndex + 1).trim();\n      }\n    }\n  }\n  return styleMap;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** HOF to sort the breakpoints by descending priority */\nfunction sortDescendingPriority(a, b) {\n  const priorityA = a ? a.priority || 0 : 0;\n  const priorityB = b ? b.priority || 0 : 0;\n  return priorityB - priorityA;\n}\n/** HOF to sort the breakpoints by ascending priority */\nfunction sortAscendingPriority(a, b) {\n  const pA = a.priority || 0;\n  const pB = b.priority || 0;\n  return pA - pB;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * MediaMonitor configures listeners to mediaQuery changes and publishes an Observable facade to\n * convert mediaQuery change callbacks to subscriber notifications. These notifications will be\n * performed within the ng Zone to trigger change detections and component updates.\n *\n * NOTE: both mediaQuery activations and de-activations are announced in notifications\n */\nclass MatchMedia {\n  constructor(_zone, _platformId, _document) {\n    this._zone = _zone;\n    this._platformId = _platformId;\n    this._document = _document;\n    /** Initialize source with 'all' so all non-responsive APIs trigger style updates */\n    this.source = new BehaviorSubject(new MediaChange(true));\n    this.registry = new Map();\n    this.pendingRemoveListenerFns = [];\n    this._observable$ = this.source.asObservable();\n  }\n  /**\n   * Publish list of all current activations\n   */\n  get activations() {\n    const results = [];\n    this.registry.forEach((mql, key) => {\n      if (mql.matches) {\n        results.push(key);\n      }\n    });\n    return results;\n  }\n  /**\n   * For the specified mediaQuery?\n   */\n  isActive(mediaQuery) {\n    const mql = this.registry.get(mediaQuery);\n    return mql?.matches ?? this.registerQuery(mediaQuery).some(m => m.matches);\n  }\n  /**\n   * External observers can watch for all (or a specific) mql changes.\n   * Typically used by the MediaQueryAdaptor; optionally available to components\n   * who wish to use the MediaMonitor as mediaMonitor$ observable service.\n   *\n   * Use deferred registration process to register breakpoints only on subscription\n   * This logic also enforces logic to register all mediaQueries BEFORE notify\n   * subscribers of notifications.\n   */\n  observe(mqList, filterOthers = false) {\n    if (mqList && mqList.length) {\n      const matchMedia$ = this._observable$.pipe(filter(change => !filterOthers ? true : mqList.indexOf(change.mediaQuery) > -1));\n      const registration$ = new Observable(observer => {\n        const matches = this.registerQuery(mqList);\n        if (matches.length) {\n          const lastChange = matches.pop();\n          matches.forEach(e => {\n            observer.next(e);\n          });\n          this.source.next(lastChange); // last match is cached\n        }\n\n        observer.complete();\n      });\n      return merge(registration$, matchMedia$);\n    }\n    return this._observable$;\n  }\n  /**\n   * Based on the BreakPointRegistry provider, register internal listeners for each unique\n   * mediaQuery. Each listener emits specific MediaChange data to observers\n   */\n  registerQuery(mediaQuery) {\n    const list = Array.isArray(mediaQuery) ? mediaQuery : [mediaQuery];\n    const matches = [];\n    buildQueryCss(list, this._document);\n    list.forEach(query => {\n      const onMQLEvent = e => {\n        this._zone.run(() => this.source.next(new MediaChange(e.matches, query)));\n      };\n      let mql = this.registry.get(query);\n      if (!mql) {\n        mql = this.buildMQL(query);\n        mql.addListener(onMQLEvent);\n        this.pendingRemoveListenerFns.push(() => mql.removeListener(onMQLEvent));\n        this.registry.set(query, mql);\n      }\n      if (mql.matches) {\n        matches.push(new MediaChange(true, query));\n      }\n    });\n    return matches;\n  }\n  ngOnDestroy() {\n    let fn;\n    while (fn = this.pendingRemoveListenerFns.pop()) {\n      fn();\n    }\n  }\n  /**\n   * Call window.matchMedia() to build a MediaQueryList; which\n   * supports 0..n listeners for activation/deactivation\n   */\n  buildMQL(query) {\n    return constructMql(query, isPlatformBrowser(this._platformId));\n  }\n}\nMatchMedia.ɵfac = function MatchMedia_Factory(t) {\n  return new (t || MatchMedia)(i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(PLATFORM_ID), i0.ɵɵinject(DOCUMENT));\n};\nMatchMedia.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: MatchMedia,\n  factory: MatchMedia.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatchMedia, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i0.NgZone\n    }, {\n      type: Object,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/**\n * Private global registry for all dynamically-created, injected style tags\n * @see prepare(query)\n */\nconst ALL_STYLES = {};\n/**\n * For Webkit engines that only trigger the MediaQueryList Listener\n * when there is at least one CSS selector for the respective media query.\n *\n * @param mediaQueries\n * @param _document\n */\nfunction buildQueryCss(mediaQueries, _document) {\n  const list = mediaQueries.filter(it => !ALL_STYLES[it]);\n  if (list.length > 0) {\n    const query = list.join(', ');\n    try {\n      const styleEl = _document.createElement('style');\n      styleEl.setAttribute('type', 'text/css');\n      if (!styleEl.styleSheet) {\n        const cssText = `\n/*\n  @angular/flex-layout - workaround for possible browser quirk with mediaQuery listeners\n  see http://bit.ly/2sd4HMP\n*/\n@media ${query} {.fx-query-test{ }}\n`;\n        styleEl.appendChild(_document.createTextNode(cssText));\n      }\n      _document.head.appendChild(styleEl);\n      // Store in private global registry\n      list.forEach(mq => ALL_STYLES[mq] = styleEl);\n    } catch (e) {\n      console.error(e);\n    }\n  }\n}\nfunction buildMockMql(query) {\n  const et = new EventTarget();\n  et.matches = query === 'all' || query === '';\n  et.media = query;\n  et.addListener = () => {};\n  et.removeListener = () => {};\n  et.addEventListener = () => {};\n  et.dispatchEvent = () => false;\n  et.onchange = null;\n  return et;\n}\nfunction constructMql(query, isBrowser) {\n  const canListen = isBrowser && !!window.matchMedia('all').addListener;\n  return canListen ? window.matchMedia(query) : buildMockMql(query);\n}\n\n/**\n * NOTE: Smaller ranges have HIGHER priority since the match is more specific\n */\nconst DEFAULT_BREAKPOINTS = [{\n  alias: 'xs',\n  mediaQuery: 'screen and (min-width: 0px) and (max-width: 599.98px)',\n  priority: 1000\n}, {\n  alias: 'sm',\n  mediaQuery: 'screen and (min-width: 600px) and (max-width: 959.98px)',\n  priority: 900\n}, {\n  alias: 'md',\n  mediaQuery: 'screen and (min-width: 960px) and (max-width: 1279.98px)',\n  priority: 800\n}, {\n  alias: 'lg',\n  mediaQuery: 'screen and (min-width: 1280px) and (max-width: 1919.98px)',\n  priority: 700\n}, {\n  alias: 'xl',\n  mediaQuery: 'screen and (min-width: 1920px) and (max-width: 4999.98px)',\n  priority: 600\n}, {\n  alias: 'lt-sm',\n  overlapping: true,\n  mediaQuery: 'screen and (max-width: 599.98px)',\n  priority: 950\n}, {\n  alias: 'lt-md',\n  overlapping: true,\n  mediaQuery: 'screen and (max-width: 959.98px)',\n  priority: 850\n}, {\n  alias: 'lt-lg',\n  overlapping: true,\n  mediaQuery: 'screen and (max-width: 1279.98px)',\n  priority: 750\n}, {\n  alias: 'lt-xl',\n  overlapping: true,\n  priority: 650,\n  mediaQuery: 'screen and (max-width: 1919.98px)'\n}, {\n  alias: 'gt-xs',\n  overlapping: true,\n  mediaQuery: 'screen and (min-width: 600px)',\n  priority: -950\n}, {\n  alias: 'gt-sm',\n  overlapping: true,\n  mediaQuery: 'screen and (min-width: 960px)',\n  priority: -850\n}, {\n  alias: 'gt-md',\n  overlapping: true,\n  mediaQuery: 'screen and (min-width: 1280px)',\n  priority: -750\n}, {\n  alias: 'gt-lg',\n  overlapping: true,\n  mediaQuery: 'screen and (min-width: 1920px)',\n  priority: -650\n}];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/* tslint:disable */\nconst HANDSET_PORTRAIT = '(orientation: portrait) and (max-width: 599.98px)';\nconst HANDSET_LANDSCAPE = '(orientation: landscape) and (max-width: 959.98px)';\nconst TABLET_PORTRAIT = '(orientation: portrait) and (min-width: 600px) and (max-width: 839.98px)';\nconst TABLET_LANDSCAPE = '(orientation: landscape) and (min-width: 960px) and (max-width: 1279.98px)';\nconst WEB_PORTRAIT = '(orientation: portrait) and (min-width: 840px)';\nconst WEB_LANDSCAPE = '(orientation: landscape) and (min-width: 1280px)';\nconst ScreenTypes = {\n  'HANDSET': `${HANDSET_PORTRAIT}, ${HANDSET_LANDSCAPE}`,\n  'TABLET': `${TABLET_PORTRAIT} , ${TABLET_LANDSCAPE}`,\n  'WEB': `${WEB_PORTRAIT}, ${WEB_LANDSCAPE} `,\n  'HANDSET_PORTRAIT': `${HANDSET_PORTRAIT}`,\n  'TABLET_PORTRAIT': `${TABLET_PORTRAIT} `,\n  'WEB_PORTRAIT': `${WEB_PORTRAIT}`,\n  'HANDSET_LANDSCAPE': `${HANDSET_LANDSCAPE}`,\n  'TABLET_LANDSCAPE': `${TABLET_LANDSCAPE}`,\n  'WEB_LANDSCAPE': `${WEB_LANDSCAPE}`\n};\n/**\n * Extended Breakpoints for handset/tablets with landscape or portrait orientations\n */\nconst ORIENTATION_BREAKPOINTS = [{\n  'alias': 'handset',\n  priority: 2000,\n  'mediaQuery': ScreenTypes.HANDSET\n}, {\n  'alias': 'handset.landscape',\n  priority: 2000,\n  'mediaQuery': ScreenTypes.HANDSET_LANDSCAPE\n}, {\n  'alias': 'handset.portrait',\n  priority: 2000,\n  'mediaQuery': ScreenTypes.HANDSET_PORTRAIT\n}, {\n  'alias': 'tablet',\n  priority: 2100,\n  'mediaQuery': ScreenTypes.TABLET\n}, {\n  'alias': 'tablet.landscape',\n  priority: 2100,\n  'mediaQuery': ScreenTypes.TABLET_LANDSCAPE\n}, {\n  'alias': 'tablet.portrait',\n  priority: 2100,\n  'mediaQuery': ScreenTypes.TABLET_PORTRAIT\n}, {\n  'alias': 'web',\n  priority: 2200,\n  'mediaQuery': ScreenTypes.WEB,\n  overlapping: true\n}, {\n  'alias': 'web.landscape',\n  priority: 2200,\n  'mediaQuery': ScreenTypes.WEB_LANDSCAPE,\n  overlapping: true\n}, {\n  'alias': 'web.portrait',\n  priority: 2200,\n  'mediaQuery': ScreenTypes.WEB_PORTRAIT,\n  overlapping: true\n}];\nconst ALIAS_DELIMITERS = /(\\.|-|_)/g;\nfunction firstUpperCase(part) {\n  let first = part.length > 0 ? part.charAt(0) : '';\n  let remainder = part.length > 1 ? part.slice(1) : '';\n  return first.toUpperCase() + remainder;\n}\n/**\n * Converts snake-case to SnakeCase.\n * @param name Text to UpperCamelCase\n */\nfunction camelCase(name) {\n  return name.replace(ALIAS_DELIMITERS, '|').split('|').map(firstUpperCase).join('');\n}\n/**\n * For each breakpoint, ensure that a Suffix is defined;\n * fallback to UpperCamelCase the unique Alias value\n */\nfunction validateSuffixes(list) {\n  list.forEach(bp => {\n    if (!bp.suffix) {\n      bp.suffix = camelCase(bp.alias); // create Suffix value based on alias\n      bp.overlapping = !!bp.overlapping; // ensure default value\n    }\n  });\n\n  return list;\n}\n/**\n * Merge a custom breakpoint list with the default list based on unique alias values\n *  - Items are added if the alias is not in the default list\n *  - Items are merged with the custom override if the alias exists in the default list\n */\nfunction mergeByAlias(defaults, custom = []) {\n  const dict = {};\n  defaults.forEach(bp => {\n    dict[bp.alias] = bp;\n  });\n  // Merge custom breakpoints\n  custom.forEach(bp => {\n    if (dict[bp.alias]) {\n      extendObject(dict[bp.alias], bp);\n    } else {\n      dict[bp.alias] = bp;\n    }\n  });\n  return validateSuffixes(Object.keys(dict).map(k => dict[k]));\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n *  Injection token unique to the flex-layout library.\n *  Use this token when build a custom provider (see below).\n */\nconst BREAKPOINTS = new InjectionToken('Token (@angular/flex-layout) Breakpoints', {\n  providedIn: 'root',\n  factory: () => {\n    const breakpoints = inject(BREAKPOINT);\n    const layoutConfig = inject(LAYOUT_CONFIG);\n    const bpFlattenArray = [].concat.apply([], (breakpoints || []).map(v => Array.isArray(v) ? v : [v]));\n    const builtIns = (layoutConfig.disableDefaultBps ? [] : DEFAULT_BREAKPOINTS).concat(layoutConfig.addOrientationBps ? ORIENTATION_BREAKPOINTS : []);\n    return mergeByAlias(builtIns, bpFlattenArray);\n  }\n});\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Registry of 1..n MediaQuery breakpoint ranges\n * This is published as a provider and may be overridden from custom, application-specific ranges\n *\n */\nclass BreakPointRegistry {\n  constructor(list) {\n    /**\n     * Memoized BreakPoint Lookups\n     */\n    this.findByMap = new Map();\n    this.items = [...list].sort(sortAscendingPriority);\n  }\n  /**\n   * Search breakpoints by alias (e.g. gt-xs)\n   */\n  findByAlias(alias) {\n    return !alias ? null : this.findWithPredicate(alias, bp => bp.alias === alias);\n  }\n  findByQuery(query) {\n    return this.findWithPredicate(query, bp => bp.mediaQuery === query);\n  }\n  /**\n   * Get all the breakpoints whose ranges could overlapping `normal` ranges;\n   * e.g. gt-sm overlaps md, lg, and xl\n   */\n  get overlappings() {\n    return this.items.filter(it => it.overlapping);\n  }\n  /**\n   * Get list of all registered (non-empty) breakpoint aliases\n   */\n  get aliases() {\n    return this.items.map(it => it.alias);\n  }\n  /**\n   * Aliases are mapped to properties using suffixes\n   * e.g.  'gt-sm' for property 'layout'  uses suffix 'GtSm'\n   * for property layoutGtSM.\n   */\n  get suffixes() {\n    return this.items.map(it => it?.suffix ?? '');\n  }\n  /**\n   * Memoized lookup using custom predicate function\n   */\n  findWithPredicate(key, searchFn) {\n    let response = this.findByMap.get(key);\n    if (!response) {\n      response = this.items.find(searchFn) ?? null;\n      this.findByMap.set(key, response);\n    }\n    return response ?? null;\n  }\n}\nBreakPointRegistry.ɵfac = function BreakPointRegistry_Factory(t) {\n  return new (t || BreakPointRegistry)(i0.ɵɵinject(BREAKPOINTS));\n};\nBreakPointRegistry.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: BreakPointRegistry,\n  factory: BreakPointRegistry.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BreakPointRegistry, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [BREAKPOINTS]\n      }]\n    }];\n  }, null);\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst PRINT = 'print';\nconst BREAKPOINT_PRINT = {\n  alias: PRINT,\n  mediaQuery: PRINT,\n  priority: 1000\n};\n/**\n * PrintHook - Use to intercept print MediaQuery activations and force\n *             layouts to render with the specified print alias/breakpoint\n *\n * Used in MediaMarshaller and MediaObserver\n */\nclass PrintHook {\n  constructor(breakpoints, layoutConfig, _document) {\n    this.breakpoints = breakpoints;\n    this.layoutConfig = layoutConfig;\n    this._document = _document;\n    // registeredBeforeAfterPrintHooks tracks if we registered the `beforeprint`\n    //  and `afterprint` event listeners.\n    this.registeredBeforeAfterPrintHooks = false;\n    // isPrintingBeforeAfterEvent is used to track if we are printing from within\n    // a `beforeprint` event handler. This prevents the typical `stopPrinting`\n    // form `interceptEvents` so that printing is not stopped while the dialog\n    // is still open. This is an extension of the `isPrinting` property on\n    // browsers which support `beforeprint` and `afterprint` events.\n    this.isPrintingBeforeAfterEvent = false;\n    this.beforePrintEventListeners = [];\n    this.afterPrintEventListeners = [];\n    this.formerActivations = null;\n    // Is this service currently in print mode\n    this.isPrinting = false;\n    this.queue = new PrintQueue();\n    this.deactivations = [];\n  }\n  /** Add 'print' mediaQuery: to listen for matchMedia activations */\n  withPrintQuery(queries) {\n    return [...queries, PRINT];\n  }\n  /** Is the MediaChange event for any 'print' @media */\n  isPrintEvent(e) {\n    return e.mediaQuery.startsWith(PRINT);\n  }\n  /** What is the desired mqAlias to use while printing? */\n  get printAlias() {\n    return [...(this.layoutConfig.printWithBreakpoints ?? [])];\n  }\n  /** Lookup breakpoints associated with print aliases. */\n  get printBreakPoints() {\n    return this.printAlias.map(alias => this.breakpoints.findByAlias(alias)).filter(bp => bp !== null);\n  }\n  /** Lookup breakpoint associated with mediaQuery */\n  getEventBreakpoints({\n    mediaQuery\n  }) {\n    const bp = this.breakpoints.findByQuery(mediaQuery);\n    const list = bp ? [...this.printBreakPoints, bp] : this.printBreakPoints;\n    return list.sort(sortDescendingPriority);\n  }\n  /** Update event with printAlias mediaQuery information */\n  updateEvent(event) {\n    let bp = this.breakpoints.findByQuery(event.mediaQuery);\n    if (this.isPrintEvent(event)) {\n      // Reset from 'print' to first (highest priority) print breakpoint\n      bp = this.getEventBreakpoints(event)[0];\n      event.mediaQuery = bp?.mediaQuery ?? '';\n    }\n    return mergeAlias(event, bp);\n  }\n  // registerBeforeAfterPrintHooks registers a `beforeprint` event hook so we can\n  // trigger print styles synchronously and apply proper layout styles.\n  // It is a noop if the hooks have already been registered or if the document's\n  // `defaultView` is not available.\n  registerBeforeAfterPrintHooks(target) {\n    // `defaultView` may be null when rendering on the server or in other contexts.\n    if (!this._document.defaultView || this.registeredBeforeAfterPrintHooks) {\n      return;\n    }\n    this.registeredBeforeAfterPrintHooks = true;\n    const beforePrintListener = () => {\n      // If we aren't already printing, start printing and update the styles as\n      // if there was a regular print `MediaChange`(from matchMedia).\n      if (!this.isPrinting) {\n        this.isPrintingBeforeAfterEvent = true;\n        this.startPrinting(target, this.getEventBreakpoints(new MediaChange(true, PRINT)));\n        target.updateStyles();\n      }\n    };\n    const afterPrintListener = () => {\n      // If we aren't already printing, start printing and update the styles as\n      // if there was a regular print `MediaChange`(from matchMedia).\n      this.isPrintingBeforeAfterEvent = false;\n      if (this.isPrinting) {\n        this.stopPrinting(target);\n        target.updateStyles();\n      }\n    };\n    // Could we have teardown logic to remove if there are no print listeners being used?\n    this._document.defaultView.addEventListener('beforeprint', beforePrintListener);\n    this._document.defaultView.addEventListener('afterprint', afterPrintListener);\n    this.beforePrintEventListeners.push(beforePrintListener);\n    this.afterPrintEventListeners.push(afterPrintListener);\n  }\n  /**\n   * Prepare RxJS tap operator with partial application\n   * @return pipeable tap predicate\n   */\n  interceptEvents(target) {\n    return event => {\n      if (this.isPrintEvent(event)) {\n        if (event.matches && !this.isPrinting) {\n          this.startPrinting(target, this.getEventBreakpoints(event));\n          target.updateStyles();\n        } else if (!event.matches && this.isPrinting && !this.isPrintingBeforeAfterEvent) {\n          this.stopPrinting(target);\n          target.updateStyles();\n        }\n        return;\n      }\n      this.collectActivations(target, event);\n    };\n  }\n  /** Stop mediaChange event propagation in event streams */\n  blockPropagation() {\n    return event => {\n      return !(this.isPrinting || this.isPrintEvent(event));\n    };\n  }\n  /**\n   * Save current activateBreakpoints (for later restore)\n   * and substitute only the printAlias breakpoint\n   */\n  startPrinting(target, bpList) {\n    this.isPrinting = true;\n    this.formerActivations = target.activatedBreakpoints;\n    target.activatedBreakpoints = this.queue.addPrintBreakpoints(bpList);\n  }\n  /** For any print de-activations, reset the entire print queue */\n  stopPrinting(target) {\n    target.activatedBreakpoints = this.deactivations;\n    this.deactivations = [];\n    this.formerActivations = null;\n    this.queue.clear();\n    this.isPrinting = false;\n  }\n  /**\n   * To restore pre-Print Activations, we must capture the proper\n   * list of breakpoint activations BEFORE print starts. OnBeforePrint()\n   * is supported; so 'print' mediaQuery activations are used as a fallback\n   * in browsers without `beforeprint` support.\n   *\n   * >  But activated breakpoints are deactivated BEFORE 'print' activation.\n   *\n   * Let's capture all de-activations using the following logic:\n   *\n   *  When not printing:\n   *    - clear cache when activating non-print breakpoint\n   *    - update cache (and sort) when deactivating\n   *\n   *  When printing:\n   *    - sort and save when starting print\n   *    - restore as activatedTargets and clear when stop printing\n   */\n  collectActivations(target, event) {\n    if (!this.isPrinting || this.isPrintingBeforeAfterEvent) {\n      if (!this.isPrintingBeforeAfterEvent) {\n        // Only clear deactivations if we aren't printing from a `beforeprint` event.\n        // Otherwise, this will clear before `stopPrinting()` is called to restore\n        // the pre-Print Activations.\n        this.deactivations = [];\n        return;\n      }\n      if (!event.matches) {\n        const bp = this.breakpoints.findByQuery(event.mediaQuery);\n        // Deactivating a breakpoint\n        if (bp) {\n          const hasFormerBp = this.formerActivations && this.formerActivations.includes(bp);\n          const wasActivated = !this.formerActivations && target.activatedBreakpoints.includes(bp);\n          const shouldDeactivate = hasFormerBp || wasActivated;\n          if (shouldDeactivate) {\n            this.deactivations.push(bp);\n            this.deactivations.sort(sortDescendingPriority);\n          }\n        }\n      }\n    }\n  }\n  /** Teardown logic for the service. */\n  ngOnDestroy() {\n    if (this._document.defaultView) {\n      this.beforePrintEventListeners.forEach(l => this._document.defaultView.removeEventListener('beforeprint', l));\n      this.afterPrintEventListeners.forEach(l => this._document.defaultView.removeEventListener('afterprint', l));\n    }\n  }\n}\nPrintHook.ɵfac = function PrintHook_Factory(t) {\n  return new (t || PrintHook)(i0.ɵɵinject(BreakPointRegistry), i0.ɵɵinject(LAYOUT_CONFIG), i0.ɵɵinject(DOCUMENT));\n};\nPrintHook.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: PrintHook,\n  factory: PrintHook.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PrintHook, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: BreakPointRegistry\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [LAYOUT_CONFIG]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n// ************************************************************************\n// Internal Utility class 'PrintQueue'\n// ************************************************************************\n/**\n * Utility class to manage print breakpoints + activatedBreakpoints\n * with correct sorting WHILE printing\n */\nclass PrintQueue {\n  constructor() {\n    /** Sorted queue with prioritized print breakpoints */\n    this.printBreakpoints = [];\n  }\n  addPrintBreakpoints(bpList) {\n    bpList.push(BREAKPOINT_PRINT);\n    bpList.sort(sortDescendingPriority);\n    bpList.forEach(bp => this.addBreakpoint(bp));\n    return this.printBreakpoints;\n  }\n  /** Add Print breakpoint to queue */\n  addBreakpoint(bp) {\n    if (!!bp) {\n      const bpInList = this.printBreakpoints.find(it => it.mediaQuery === bp.mediaQuery);\n      if (bpInList === undefined) {\n        // If this is a `printAlias` breakpoint, then append. If a true 'print' breakpoint,\n        // register as highest priority in the queue\n        this.printBreakpoints = isPrintBreakPoint(bp) ? [bp, ...this.printBreakpoints] : [...this.printBreakpoints, bp];\n      }\n    }\n  }\n  /** Restore original activated breakpoints and clear internal caches */\n  clear() {\n    this.printBreakpoints = [];\n  }\n}\n// ************************************************************************\n// Internal Utility methods\n// ************************************************************************\n/** Only support intercept queueing if the Breakpoint is a print @media query */\nfunction isPrintBreakPoint(bp) {\n  return bp?.mediaQuery.startsWith(PRINT) ?? false;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * MediaMarshaller - register responsive values from directives and\n *                   trigger them based on media query events\n */\nclass MediaMarshaller {\n  constructor(matchMedia, breakpoints, hook) {\n    this.matchMedia = matchMedia;\n    this.breakpoints = breakpoints;\n    this.hook = hook;\n    this._useFallbacks = true;\n    this._activatedBreakpoints = [];\n    this.elementMap = new Map();\n    this.elementKeyMap = new WeakMap();\n    this.watcherMap = new WeakMap(); // special triggers to update elements\n    this.updateMap = new WeakMap(); // callback functions to update styles\n    this.clearMap = new WeakMap(); // callback functions to clear styles\n    this.subject = new Subject();\n    this.observeActivations();\n  }\n  get activatedAlias() {\n    return this.activatedBreakpoints[0]?.alias ?? '';\n  }\n  set activatedBreakpoints(bps) {\n    this._activatedBreakpoints = [...bps];\n  }\n  get activatedBreakpoints() {\n    return [...this._activatedBreakpoints];\n  }\n  set useFallbacks(value) {\n    this._useFallbacks = value;\n  }\n  /**\n   * Update styles on breakpoint activates or deactivates\n   * @param mc\n   */\n  onMediaChange(mc) {\n    const bp = this.findByQuery(mc.mediaQuery);\n    if (bp) {\n      mc = mergeAlias(mc, bp);\n      const bpIndex = this.activatedBreakpoints.indexOf(bp);\n      if (mc.matches && bpIndex === -1) {\n        this._activatedBreakpoints.push(bp);\n        this._activatedBreakpoints.sort(sortDescendingPriority);\n        this.updateStyles();\n      } else if (!mc.matches && bpIndex !== -1) {\n        // Remove the breakpoint when it's deactivated\n        this._activatedBreakpoints.splice(bpIndex, 1);\n        this._activatedBreakpoints.sort(sortDescendingPriority);\n        this.updateStyles();\n      }\n    }\n  }\n  /**\n   * initialize the marshaller with necessary elements for delegation on an element\n   * @param element\n   * @param key\n   * @param updateFn optional callback so that custom bp directives don't have to re-provide this\n   * @param clearFn optional callback so that custom bp directives don't have to re-provide this\n   * @param extraTriggers other triggers to force style updates (e.g. layout, directionality, etc)\n   */\n  init(element, key, updateFn, clearFn, extraTriggers = []) {\n    initBuilderMap(this.updateMap, element, key, updateFn);\n    initBuilderMap(this.clearMap, element, key, clearFn);\n    this.buildElementKeyMap(element, key);\n    this.watchExtraTriggers(element, key, extraTriggers);\n  }\n  /**\n   * get the value for an element and key and optionally a given breakpoint\n   * @param element\n   * @param key\n   * @param bp\n   */\n  getValue(element, key, bp) {\n    const bpMap = this.elementMap.get(element);\n    if (bpMap) {\n      const values = bp !== undefined ? bpMap.get(bp) : this.getActivatedValues(bpMap, key);\n      if (values) {\n        return values.get(key);\n      }\n    }\n    return undefined;\n  }\n  /**\n   * whether the element has values for a given key\n   * @param element\n   * @param key\n   */\n  hasValue(element, key) {\n    const bpMap = this.elementMap.get(element);\n    if (bpMap) {\n      const values = this.getActivatedValues(bpMap, key);\n      if (values) {\n        return values.get(key) !== undefined || false;\n      }\n    }\n    return false;\n  }\n  /**\n   * Set the value for an input on a directive\n   * @param element the element in question\n   * @param key the type of the directive (e.g. flex, layout-gap, etc)\n   * @param bp the breakpoint suffix (empty string = default)\n   * @param val the value for the breakpoint\n   */\n  setValue(element, key, val, bp) {\n    let bpMap = this.elementMap.get(element);\n    if (!bpMap) {\n      bpMap = new Map().set(bp, new Map().set(key, val));\n      this.elementMap.set(element, bpMap);\n    } else {\n      const values = (bpMap.get(bp) ?? new Map()).set(key, val);\n      bpMap.set(bp, values);\n      this.elementMap.set(element, bpMap);\n    }\n    const value = this.getValue(element, key);\n    if (value !== undefined) {\n      this.updateElement(element, key, value);\n    }\n  }\n  /** Track element value changes for a specific key */\n  trackValue(element, key) {\n    return this.subject.asObservable().pipe(filter(v => v.element === element && v.key === key));\n  }\n  /** update all styles for all elements on the current breakpoint */\n  updateStyles() {\n    this.elementMap.forEach((bpMap, el) => {\n      const keyMap = new Set(this.elementKeyMap.get(el));\n      let valueMap = this.getActivatedValues(bpMap);\n      if (valueMap) {\n        valueMap.forEach((v, k) => {\n          this.updateElement(el, k, v);\n          keyMap.delete(k);\n        });\n      }\n      keyMap.forEach(k => {\n        valueMap = this.getActivatedValues(bpMap, k);\n        if (valueMap) {\n          const value = valueMap.get(k);\n          this.updateElement(el, k, value);\n        } else {\n          this.clearElement(el, k);\n        }\n      });\n    });\n  }\n  /**\n   * clear the styles for a given element\n   * @param element\n   * @param key\n   */\n  clearElement(element, key) {\n    const builders = this.clearMap.get(element);\n    if (builders) {\n      const clearFn = builders.get(key);\n      if (!!clearFn) {\n        clearFn();\n        this.subject.next({\n          element,\n          key,\n          value: ''\n        });\n      }\n    }\n  }\n  /**\n   * update a given element with the activated values for a given key\n   * @param element\n   * @param key\n   * @param value\n   */\n  updateElement(element, key, value) {\n    const builders = this.updateMap.get(element);\n    if (builders) {\n      const updateFn = builders.get(key);\n      if (!!updateFn) {\n        updateFn(value);\n        this.subject.next({\n          element,\n          key,\n          value\n        });\n      }\n    }\n  }\n  /**\n   * release all references to a given element\n   * @param element\n   */\n  releaseElement(element) {\n    const watcherMap = this.watcherMap.get(element);\n    if (watcherMap) {\n      watcherMap.forEach(s => s.unsubscribe());\n      this.watcherMap.delete(element);\n    }\n    const elementMap = this.elementMap.get(element);\n    if (elementMap) {\n      elementMap.forEach((_, s) => elementMap.delete(s));\n      this.elementMap.delete(element);\n    }\n  }\n  /**\n   * trigger an update for a given element and key (e.g. layout)\n   * @param element\n   * @param key\n   */\n  triggerUpdate(element, key) {\n    const bpMap = this.elementMap.get(element);\n    if (bpMap) {\n      const valueMap = this.getActivatedValues(bpMap, key);\n      if (valueMap) {\n        if (key) {\n          this.updateElement(element, key, valueMap.get(key));\n        } else {\n          valueMap.forEach((v, k) => this.updateElement(element, k, v));\n        }\n      }\n    }\n  }\n  /** Cross-reference for HTMLElement with directive key */\n  buildElementKeyMap(element, key) {\n    let keyMap = this.elementKeyMap.get(element);\n    if (!keyMap) {\n      keyMap = new Set();\n      this.elementKeyMap.set(element, keyMap);\n    }\n    keyMap.add(key);\n  }\n  /**\n   * Other triggers that should force style updates:\n   * - directionality\n   * - layout changes\n   * - mutationobserver updates\n   */\n  watchExtraTriggers(element, key, triggers) {\n    if (triggers && triggers.length) {\n      let watchers = this.watcherMap.get(element);\n      if (!watchers) {\n        watchers = new Map();\n        this.watcherMap.set(element, watchers);\n      }\n      const subscription = watchers.get(key);\n      if (!subscription) {\n        const newSubscription = merge(...triggers).subscribe(() => {\n          const currentValue = this.getValue(element, key);\n          this.updateElement(element, key, currentValue);\n        });\n        watchers.set(key, newSubscription);\n      }\n    }\n  }\n  /** Breakpoint locator by mediaQuery */\n  findByQuery(query) {\n    return this.breakpoints.findByQuery(query);\n  }\n  /**\n   * get the fallback breakpoint for a given element, starting with the current breakpoint\n   * @param bpMap\n   * @param key\n   */\n  getActivatedValues(bpMap, key) {\n    for (let i = 0; i < this.activatedBreakpoints.length; i++) {\n      const activatedBp = this.activatedBreakpoints[i];\n      const valueMap = bpMap.get(activatedBp.alias);\n      if (valueMap) {\n        if (key === undefined || valueMap.has(key) && valueMap.get(key) != null) {\n          return valueMap;\n        }\n      }\n    }\n    // On the server, we explicitly have an \"all\" section filled in to begin with.\n    // So we don't need to aggressively find a fallback if no explicit value exists.\n    if (!this._useFallbacks) {\n      return undefined;\n    }\n    const lastHope = bpMap.get('');\n    return key === undefined || lastHope && lastHope.has(key) ? lastHope : undefined;\n  }\n  /**\n   * Watch for mediaQuery breakpoint activations\n   */\n  observeActivations() {\n    const queries = this.breakpoints.items.map(bp => bp.mediaQuery);\n    this.hook.registerBeforeAfterPrintHooks(this);\n    this.matchMedia.observe(this.hook.withPrintQuery(queries)).pipe(tap(this.hook.interceptEvents(this)), filter(this.hook.blockPropagation())).subscribe(this.onMediaChange.bind(this));\n  }\n}\nMediaMarshaller.ɵfac = function MediaMarshaller_Factory(t) {\n  return new (t || MediaMarshaller)(i0.ɵɵinject(MatchMedia), i0.ɵɵinject(BreakPointRegistry), i0.ɵɵinject(PrintHook));\n};\nMediaMarshaller.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: MediaMarshaller,\n  factory: MediaMarshaller.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MediaMarshaller, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: MatchMedia\n    }, {\n      type: BreakPointRegistry\n    }, {\n      type: PrintHook\n    }];\n  }, null);\n})();\nfunction initBuilderMap(map, element, key, input) {\n  if (input !== undefined) {\n    const oldMap = map.get(element) ?? new Map();\n    oldMap.set(key, input);\n    map.set(element, oldMap);\n  }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass BaseDirective2 {\n  constructor(elementRef, styleBuilder, styler, marshal) {\n    this.elementRef = elementRef;\n    this.styleBuilder = styleBuilder;\n    this.styler = styler;\n    this.marshal = marshal;\n    this.DIRECTIVE_KEY = '';\n    this.inputs = [];\n    /** The most recently used styles for the builder */\n    this.mru = {};\n    this.destroySubject = new Subject();\n    /** Cache map for style computation */\n    this.styleCache = new Map();\n  }\n  /** Access to host element's parent DOM node */\n  get parentElement() {\n    return this.elementRef.nativeElement.parentElement;\n  }\n  /** Access to the HTMLElement for the directive */\n  get nativeElement() {\n    return this.elementRef.nativeElement;\n  }\n  /** Access to the activated value for the directive */\n  get activatedValue() {\n    return this.marshal.getValue(this.nativeElement, this.DIRECTIVE_KEY);\n  }\n  set activatedValue(value) {\n    this.marshal.setValue(this.nativeElement, this.DIRECTIVE_KEY, value, this.marshal.activatedAlias);\n  }\n  /** For @Input changes */\n  ngOnChanges(changes) {\n    Object.keys(changes).forEach(key => {\n      if (this.inputs.indexOf(key) !== -1) {\n        const bp = key.split('.').slice(1).join('.');\n        const val = changes[key].currentValue;\n        this.setValue(val, bp);\n      }\n    });\n  }\n  ngOnDestroy() {\n    this.destroySubject.next();\n    this.destroySubject.complete();\n    this.marshal.releaseElement(this.nativeElement);\n  }\n  /** Register with central marshaller service */\n  init(extraTriggers = []) {\n    this.marshal.init(this.elementRef.nativeElement, this.DIRECTIVE_KEY, this.updateWithValue.bind(this), this.clearStyles.bind(this), extraTriggers);\n  }\n  /** Add styles to the element using predefined style builder */\n  addStyles(input, parent) {\n    const builder = this.styleBuilder;\n    const useCache = builder.shouldCache;\n    let genStyles = this.styleCache.get(input);\n    if (!genStyles || !useCache) {\n      genStyles = builder.buildStyles(input, parent);\n      if (useCache) {\n        this.styleCache.set(input, genStyles);\n      }\n    }\n    this.mru = {\n      ...genStyles\n    };\n    this.applyStyleToElement(genStyles);\n    builder.sideEffect(input, genStyles, parent);\n  }\n  /** Remove generated styles from an element using predefined style builder */\n  clearStyles() {\n    Object.keys(this.mru).forEach(k => {\n      this.mru[k] = '';\n    });\n    this.applyStyleToElement(this.mru);\n    this.mru = {};\n    this.currentValue = undefined;\n  }\n  /** Force trigger style updates on DOM element */\n  triggerUpdate() {\n    this.marshal.triggerUpdate(this.nativeElement, this.DIRECTIVE_KEY);\n  }\n  /**\n   * Determine the DOM element's Flexbox flow (flex-direction).\n   *\n   * Check inline style first then check computed (stylesheet) style.\n   * And optionally add the flow value to element's inline style.\n   */\n  getFlexFlowDirection(target, addIfMissing = false) {\n    if (target) {\n      const [value, hasInlineValue] = this.styler.getFlowDirection(target);\n      if (!hasInlineValue && addIfMissing) {\n        const style = buildLayoutCSS(value);\n        const elements = [target];\n        this.styler.applyStyleToElements(style, elements);\n      }\n      return value.trim();\n    }\n    return 'row';\n  }\n  hasWrap(target) {\n    return this.styler.hasWrap(target);\n  }\n  /** Applies styles given via string pair or object map to the directive element */\n  applyStyleToElement(style, value, element = this.nativeElement) {\n    this.styler.applyStyleToElement(element, style, value);\n  }\n  setValue(val, bp) {\n    this.marshal.setValue(this.nativeElement, this.DIRECTIVE_KEY, val, bp);\n  }\n  updateWithValue(input) {\n    if (this.currentValue !== input) {\n      this.addStyles(input);\n      this.currentValue = input;\n    }\n  }\n}\nBaseDirective2.ɵfac = function BaseDirective2_Factory(t) {\n  return new (t || BaseDirective2)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(StyleBuilder), i0.ɵɵdirectiveInject(StyleUtils), i0.ɵɵdirectiveInject(MediaMarshaller));\n};\nBaseDirective2.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: BaseDirective2,\n  features: [i0.ɵɵNgOnChangesFeature]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BaseDirective2, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: StyleBuilder\n    }, {\n      type: StyleUtils\n    }, {\n      type: MediaMarshaller\n    }];\n  }, null);\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * MockMatchMedia mocks calls to the Window API matchMedia with a build of a simulated\n * MockMediaQueryListener. Methods are available to simulate an activation of a mediaQuery\n * range and to clearAll mediaQuery listeners.\n */\nclass MockMatchMedia extends MatchMedia {\n  constructor(_zone, _platformId, _document, _breakpoints) {\n    super(_zone, _platformId, _document);\n    this._breakpoints = _breakpoints;\n    this.autoRegisterQueries = true; // Used for testing BreakPoint registrations\n    this.useOverlaps = false; // Allow fallback to overlapping mediaQueries\n  }\n  /** Easy method to clear all listeners for all mediaQueries */\n  clearAll() {\n    this.registry.forEach(mql => {\n      mql.destroy();\n    });\n    this.registry.clear();\n    this.useOverlaps = false;\n  }\n  /** Feature to support manual, simulated activation of a mediaQuery. */\n  activate(mediaQuery, useOverlaps = this.useOverlaps) {\n    mediaQuery = this._validateQuery(mediaQuery);\n    if (useOverlaps || !this.isActive(mediaQuery)) {\n      this._deactivateAll();\n      this._registerMediaQuery(mediaQuery);\n      this._activateWithOverlaps(mediaQuery, useOverlaps);\n    }\n    return this.hasActivated;\n  }\n  /** Converts an optional mediaQuery alias to a specific, valid mediaQuery */\n  _validateQuery(queryOrAlias) {\n    const bp = this._breakpoints.findByAlias(queryOrAlias);\n    return bp?.mediaQuery ?? queryOrAlias;\n  }\n  /**\n   * Manually onMediaChange any overlapping mediaQueries to simulate\n   * similar functionality in the window.matchMedia()\n   */\n  _activateWithOverlaps(mediaQuery, useOverlaps) {\n    if (useOverlaps) {\n      const bp = this._breakpoints.findByQuery(mediaQuery);\n      const alias = bp?.alias ?? 'unknown';\n      // Simulate activation of overlapping lt-<XXX> ranges\n      switch (alias) {\n        case 'lg':\n          this._activateByAlias(['lt-xl']);\n          break;\n        case 'md':\n          this._activateByAlias(['lt-xl', 'lt-lg']);\n          break;\n        case 'sm':\n          this._activateByAlias(['lt-xl', 'lt-lg', 'lt-md']);\n          break;\n        case 'xs':\n          this._activateByAlias(['lt-xl', 'lt-lg', 'lt-md', 'lt-sm']);\n          break;\n      }\n      // Simulate activation of overlapping gt-<xxxx> mediaQuery ranges\n      switch (alias) {\n        case 'xl':\n          this._activateByAlias(['gt-lg', 'gt-md', 'gt-sm', 'gt-xs']);\n          break;\n        case 'lg':\n          this._activateByAlias(['gt-md', 'gt-sm', 'gt-xs']);\n          break;\n        case 'md':\n          this._activateByAlias(['gt-sm', 'gt-xs']);\n          break;\n        case 'sm':\n          this._activateByAlias(['gt-xs']);\n          break;\n      }\n    }\n    // Activate last since the responsiveActivation is watching *this* mediaQuery\n    return this._activateByQuery(mediaQuery);\n  }\n  /**\n   *\n   */\n  _activateByAlias(aliases) {\n    const activate = alias => {\n      const bp = this._breakpoints.findByAlias(alias);\n      this._activateByQuery(bp?.mediaQuery ?? alias);\n    };\n    aliases.forEach(activate);\n  }\n  /**\n   *\n   */\n  _activateByQuery(mediaQuery) {\n    if (!this.registry.has(mediaQuery) && this.autoRegisterQueries) {\n      this._registerMediaQuery(mediaQuery);\n    }\n    const mql = this.registry.get(mediaQuery);\n    if (mql && !this.isActive(mediaQuery)) {\n      this.registry.set(mediaQuery, mql.activate());\n    }\n    return this.hasActivated;\n  }\n  /** Deactivate all current MQLs and reset the buffer */\n  _deactivateAll() {\n    this.registry.forEach(it => {\n      it.deactivate();\n    });\n    return this;\n  }\n  /** Insure the mediaQuery is registered with MatchMedia */\n  _registerMediaQuery(mediaQuery) {\n    if (!this.registry.has(mediaQuery) && this.autoRegisterQueries) {\n      this.registerQuery(mediaQuery);\n    }\n  }\n  /**\n   * Call window.matchMedia() to build a MediaQueryList; which\n   * supports 0..n listeners for activation/deactivation\n   */\n  buildMQL(query) {\n    return new MockMediaQueryList(query);\n  }\n  get hasActivated() {\n    return this.activations.length > 0;\n  }\n}\nMockMatchMedia.ɵfac = function MockMatchMedia_Factory(t) {\n  return new (t || MockMatchMedia)(i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(PLATFORM_ID), i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(BreakPointRegistry));\n};\nMockMatchMedia.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: MockMatchMedia,\n  factory: MockMatchMedia.ɵfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MockMatchMedia, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i0.NgZone\n    }, {\n      type: Object,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: BreakPointRegistry\n    }];\n  }, null);\n})();\n/**\n * Special internal class to simulate a MediaQueryList and\n * - supports manual activation to simulate mediaQuery matching\n * - manages listeners\n */\nclass MockMediaQueryList extends EventTarget {\n  constructor(_mediaQuery) {\n    super();\n    this._mediaQuery = _mediaQuery;\n    this._isActive = false;\n    this._listeners = [];\n    this.onchange = null;\n  }\n  get matches() {\n    return this._isActive;\n  }\n  get media() {\n    return this._mediaQuery;\n  }\n  /**\n   * Destroy the current list by deactivating the\n   * listeners and clearing the internal list\n   */\n  destroy() {\n    this.deactivate();\n    this._listeners = [];\n  }\n  /** Notify all listeners that 'matches === TRUE' */\n  activate() {\n    if (!this._isActive) {\n      this._isActive = true;\n      this._listeners.forEach(callback => {\n        const cb = callback;\n        cb.call(this, {\n          matches: this.matches,\n          media: this.media\n        });\n      });\n    }\n    return this;\n  }\n  /** Notify all listeners that 'matches === false' */\n  deactivate() {\n    if (this._isActive) {\n      this._isActive = false;\n      this._listeners.forEach(callback => {\n        const cb = callback;\n        cb.call(this, {\n          matches: this.matches,\n          media: this.media\n        });\n      });\n    }\n    return this;\n  }\n  /** Add a listener to our internal list to activate later */\n  addListener(listener) {\n    if (this._listeners.indexOf(listener) === -1) {\n      this._listeners.push(listener);\n    }\n    if (this._isActive) {\n      const cb = listener;\n      cb.call(this, {\n        matches: this.matches,\n        media: this.media\n      });\n    }\n  }\n  /** Don't need to remove listeners in the testing environment */\n  removeListener(_) {}\n  dispatchEvent(_) {\n    return false;\n  }\n}\n/**\n * Pre-configured provider for MockMatchMedia\n */\nconst MockMatchMediaProvider = {\n  provide: MatchMedia,\n  useClass: MockMatchMedia\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Wraps the provided value in an array, unless the provided value is an array. */\nfunction coerceArray(value) {\n  return Array.isArray(value) ? value : [value];\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * MediaObserver enables applications to listen for 1..n mediaQuery activations and to determine\n * if a mediaQuery is currently activated.\n *\n * Since a breakpoint change will first deactivate 1...n mediaQueries and then possibly activate\n * 1..n mediaQueries, the MediaObserver will debounce notifications and report ALL *activations*\n * in 1 event notification. The reported activations will be sorted in descending priority order.\n *\n * This class uses the BreakPoint Registry to inject alias information into the raw MediaChange\n * notification. For custom mediaQuery notifications, alias information will not be injected and\n * those fields will be ''.\n *\n * Note: Developers should note that only mediaChange activations (not de-activations)\n *       are announced by the MediaObserver.\n *\n *  @usage\n *\n *  // RxJS\n *  import { filter } from 'rxjs/operators';\n *  import { MediaObserver } from '@angular/flex-layout';\n *\n *  @Component({ ... })\n *  export class AppComponent {\n *    status: string = '';\n *\n *    constructor(mediaObserver: MediaObserver) {\n *      const media$ = mediaObserver.asObservable().pipe(\n *        filter((changes: MediaChange[]) => true)   // silly noop filter\n *      );\n *\n *      media$.subscribe((changes: MediaChange[]) => {\n *        let status = '';\n *        changes.forEach( change => {\n *          status += `'${change.mqAlias}' = (${change.mediaQuery}) <br/>` ;\n *        });\n *        this.status = status;\n *     });\n *\n *    }\n *  }\n */\nclass MediaObserver {\n  constructor(breakpoints, matchMedia, hook) {\n    this.breakpoints = breakpoints;\n    this.matchMedia = matchMedia;\n    this.hook = hook;\n    /** Filter MediaChange notifications for overlapping breakpoints */\n    this.filterOverlaps = false;\n    this.destroyed$ = new Subject();\n    this._media$ = this.watchActivations();\n  }\n  /**\n   * Completes the active subject, signalling to all complete for all\n   * MediaObserver subscribers\n   */\n  ngOnDestroy() {\n    this.destroyed$.next();\n    this.destroyed$.complete();\n  }\n  // ************************************************\n  // Public Methods\n  // ************************************************\n  /**\n   * Observe changes to current activation 'list'\n   */\n  asObservable() {\n    return this._media$;\n  }\n  /**\n   * Allow programmatic query to determine if one or more media query/alias match\n   * the current viewport size.\n   * @param value One or more media queries (or aliases) to check.\n   * @returns Whether any of the media queries match.\n   */\n  isActive(value) {\n    const aliases = splitQueries(coerceArray(value));\n    return aliases.some(alias => {\n      const query = toMediaQuery(alias, this.breakpoints);\n      return query !== null && this.matchMedia.isActive(query);\n    });\n  }\n  // ************************************************\n  // Internal Methods\n  // ************************************************\n  /**\n   * Register all the mediaQueries registered in the BreakPointRegistry\n   * This is needed so subscribers can be auto-notified of all standard, registered\n   * mediaQuery activations\n   */\n  watchActivations() {\n    const queries = this.breakpoints.items.map(bp => bp.mediaQuery);\n    return this.buildObservable(queries);\n  }\n  /**\n   * Only pass/announce activations (not de-activations)\n   *\n   * Since multiple-mediaQueries can be activation in a cycle,\n   * gather all current activations into a single list of changes to observers\n   *\n   * Inject associated (if any) alias information into the MediaChange event\n   * - Exclude mediaQuery activations for overlapping mQs. List bounded mQ ranges only\n   * - Exclude print activations that do not have an associated mediaQuery\n   *\n   * NOTE: the raw MediaChange events [from MatchMedia] do not\n   *       contain important alias information; as such this info\n   *       must be injected into the MediaChange\n   */\n  buildObservable(mqList) {\n    const hasChanges = changes => {\n      const isValidQuery = change => change.mediaQuery.length > 0;\n      return changes.filter(isValidQuery).length > 0;\n    };\n    const excludeOverlaps = changes => {\n      return !this.filterOverlaps ? changes : changes.filter(change => {\n        const bp = this.breakpoints.findByQuery(change.mediaQuery);\n        return bp?.overlapping ?? true;\n      });\n    };\n    const ignoreDuplicates = (previous, current) => {\n      if (previous.length !== current.length) {\n        return false;\n      }\n      const previousMqs = previous.map(mc => mc.mediaQuery);\n      const currentMqs = new Set(current.map(mc => mc.mediaQuery));\n      const difference = new Set(previousMqs.filter(mq => !currentMqs.has(mq)));\n      return difference.size === 0;\n    };\n    /**\n     */\n    return this.matchMedia.observe(this.hook.withPrintQuery(mqList)).pipe(filter(change => change.matches), debounceTime(0, asapScheduler), switchMap(_ => of(this.findAllActivations())), map(excludeOverlaps), filter(hasChanges), distinctUntilChanged(ignoreDuplicates), takeUntil(this.destroyed$));\n  }\n  /**\n   * Find all current activations and prepare single list of activations\n   * sorted by descending priority.\n   */\n  findAllActivations() {\n    const mergeMQAlias = change => {\n      const bp = this.breakpoints.findByQuery(change.mediaQuery);\n      return mergeAlias(change, bp);\n    };\n    const replaceWithPrintAlias = change => this.hook.isPrintEvent(change) ? this.hook.updateEvent(change) : change;\n    return this.matchMedia.activations.map(query => new MediaChange(true, query)).map(replaceWithPrintAlias).map(mergeMQAlias).sort(sortDescendingPriority);\n  }\n}\nMediaObserver.ɵfac = function MediaObserver_Factory(t) {\n  return new (t || MediaObserver)(i0.ɵɵinject(BreakPointRegistry), i0.ɵɵinject(MatchMedia), i0.ɵɵinject(PrintHook));\n};\nMediaObserver.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: MediaObserver,\n  factory: MediaObserver.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MediaObserver, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: BreakPointRegistry\n    }, {\n      type: MatchMedia\n    }, {\n      type: PrintHook\n    }];\n  }, null);\n})();\n/**\n * Find associated breakpoint (if any)\n */\nfunction toMediaQuery(query, locator) {\n  const bp = locator.findByAlias(query) ?? locator.findByQuery(query);\n  return bp?.mediaQuery ?? null;\n}\n/**\n * Split each query string into separate query strings if two queries are provided as comma\n * separated.\n */\nfunction splitQueries(queries) {\n  return queries.flatMap(query => query.split(',')).map(query => query.trim());\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Class\n */\nclass MediaTrigger {\n  constructor(breakpoints, matchMedia, layoutConfig, _platformId, _document) {\n    this.breakpoints = breakpoints;\n    this.matchMedia = matchMedia;\n    this.layoutConfig = layoutConfig;\n    this._platformId = _platformId;\n    this._document = _document;\n    this.hasCachedRegistryMatches = false;\n    this.originalActivations = [];\n    this.originalRegistry = new Map();\n  }\n  /**\n   * Manually activate range of breakpoints\n   * @param list array of mediaQuery or alias strings\n   */\n  activate(list) {\n    list = list.map(it => it.trim()); // trim queries\n    this.saveActivations();\n    this.deactivateAll();\n    this.setActivations(list);\n    this.prepareAutoRestore();\n  }\n  /**\n   * Restore original, 'real' breakpoints and emit events\n   * to trigger stream notification\n   */\n  restore() {\n    if (this.hasCachedRegistryMatches) {\n      const extractQuery = change => change.mediaQuery;\n      const list = this.originalActivations.map(extractQuery);\n      try {\n        this.deactivateAll();\n        this.restoreRegistryMatches();\n        this.setActivations(list);\n      } finally {\n        this.originalActivations = [];\n        if (this.resizeSubscription) {\n          this.resizeSubscription.unsubscribe();\n        }\n      }\n    }\n  }\n  // ************************************************\n  // Internal Methods\n  // ************************************************\n  /**\n   * Whenever window resizes, immediately auto-restore original\n   * activations (if we are simulating activations)\n   */\n  prepareAutoRestore() {\n    const isBrowser = isPlatformBrowser(this._platformId) && this._document;\n    const enableAutoRestore = isBrowser && this.layoutConfig.mediaTriggerAutoRestore;\n    if (enableAutoRestore) {\n      const resize$ = fromEvent(window, 'resize').pipe(take(1));\n      this.resizeSubscription = resize$.subscribe(this.restore.bind(this));\n    }\n  }\n  /**\n   * Notify all matchMedia subscribers of de-activations\n   *\n   * Note: we must force 'matches' updates for\n   *       future matchMedia::activation lookups\n   */\n  deactivateAll() {\n    const list = this.currentActivations;\n    this.forceRegistryMatches(list, false);\n    this.simulateMediaChanges(list, false);\n  }\n  /**\n   * Cache current activations as sorted, prioritized list of MediaChanges\n   */\n  saveActivations() {\n    if (!this.hasCachedRegistryMatches) {\n      const toMediaChange = query => new MediaChange(true, query);\n      const mergeMQAlias = change => {\n        const bp = this.breakpoints.findByQuery(change.mediaQuery);\n        return mergeAlias(change, bp);\n      };\n      this.originalActivations = this.currentActivations.map(toMediaChange).map(mergeMQAlias).sort(sortDescendingPriority);\n      this.cacheRegistryMatches();\n    }\n  }\n  /**\n   * Force set manual activations for specified mediaQuery list\n   */\n  setActivations(list) {\n    if (!!this.originalRegistry) {\n      this.forceRegistryMatches(list, true);\n    }\n    this.simulateMediaChanges(list);\n  }\n  /**\n   * For specified mediaQuery list manually simulate activations or deactivations\n   */\n  simulateMediaChanges(queries, matches = true) {\n    const toMediaQuery = query => {\n      const locator = this.breakpoints;\n      const bp = locator.findByAlias(query) || locator.findByQuery(query);\n      return bp ? bp.mediaQuery : query;\n    };\n    const emitChangeEvent = query => this.emitChangeEvent(matches, query);\n    queries.map(toMediaQuery).forEach(emitChangeEvent);\n  }\n  /**\n   * Replace current registry with simulated registry...\n   * Note: this is required since MediaQueryList::matches is 'readOnly'\n   */\n  forceRegistryMatches(queries, matches) {\n    const registry = new Map();\n    queries.forEach(query => {\n      registry.set(query, {\n        matches\n      });\n    });\n    this.matchMedia.registry = registry;\n  }\n  /**\n   * Save current MatchMedia::registry items.\n   */\n  cacheRegistryMatches() {\n    const target = this.originalRegistry;\n    target.clear();\n    this.matchMedia.registry.forEach((value, key) => {\n      target.set(key, value);\n    });\n    this.hasCachedRegistryMatches = true;\n  }\n  /**\n   * Restore original, 'true' registry\n   */\n  restoreRegistryMatches() {\n    const target = this.matchMedia.registry;\n    target.clear();\n    this.originalRegistry.forEach((value, key) => {\n      target.set(key, value);\n    });\n    this.originalRegistry.clear();\n    this.hasCachedRegistryMatches = false;\n  }\n  /**\n   * Manually emit a MediaChange event via the MatchMedia to MediaMarshaller and MediaObserver\n   */\n  emitChangeEvent(matches, query) {\n    this.matchMedia.source.next(new MediaChange(matches, query));\n  }\n  get currentActivations() {\n    return this.matchMedia.activations;\n  }\n}\nMediaTrigger.ɵfac = function MediaTrigger_Factory(t) {\n  return new (t || MediaTrigger)(i0.ɵɵinject(BreakPointRegistry), i0.ɵɵinject(MatchMedia), i0.ɵɵinject(LAYOUT_CONFIG), i0.ɵɵinject(PLATFORM_ID), i0.ɵɵinject(DOCUMENT));\n};\nMediaTrigger.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: MediaTrigger,\n  factory: MediaTrigger.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MediaTrigger, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: BreakPointRegistry\n    }, {\n      type: MatchMedia\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [LAYOUT_CONFIG]\n      }]\n    }, {\n      type: Object,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n* The flex API permits 3 or 1 parts of the value:\n*    - `flex-grow flex-shrink flex-basis`, or\n*    - `flex-basis`\n*/\nfunction validateBasis(basis, grow = '1', shrink = '1') {\n  let parts = [grow, shrink, basis];\n  let j = basis.indexOf('calc');\n  if (j > 0) {\n    parts[2] = _validateCalcValue(basis.substring(j).trim());\n    let matches = basis.substr(0, j).trim().split(' ');\n    if (matches.length == 2) {\n      parts[0] = matches[0];\n      parts[1] = matches[1];\n    }\n  } else if (j == 0) {\n    parts[2] = _validateCalcValue(basis.trim());\n  } else {\n    let matches = basis.split(' ');\n    parts = matches.length === 3 ? matches : [grow, shrink, basis];\n  }\n  return parts;\n}\n/**\n * Calc expressions require whitespace before & after any expression operators\n * This is a simple, crude whitespace padding solution.\n *   - '3 3 calc(15em + 20px)'\n *   - calc(100% / 7 * 2)\n *   - 'calc(15em + 20px)'\n *   - 'calc(15em+20px)'\n *   - '37px'\n *   = '43%'\n */\nfunction _validateCalcValue(calc) {\n  return calc.replace(/[\\s]/g, '').replace(/[\\/\\*\\+\\-]/g, ' $& ');\n}\nconst MULTIPLIER_SUFFIX = 'x';\nfunction multiply(value, multiplier) {\n  if (multiplier === undefined) {\n    return value;\n  }\n  const transformValue = possibleValue => {\n    const numberValue = +possibleValue.slice(0, -MULTIPLIER_SUFFIX.length);\n    if (value.endsWith(MULTIPLIER_SUFFIX) && !isNaN(numberValue)) {\n      return `${numberValue * multiplier.value}${multiplier.unit}`;\n    }\n    return value;\n  };\n  return value.includes(' ') ? value.split(' ').map(transformValue).join(' ') : transformValue(value);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BREAKPOINT, BREAKPOINTS, BREAKPOINT_PRINT, BROWSER_PROVIDER, BaseDirective2, BreakPointRegistry, CLASS_NAME, CoreModule, DEFAULT_BREAKPOINTS, DEFAULT_CONFIG, LAYOUT_CONFIG, MediaChange, MediaMarshaller, MediaObserver, MediaTrigger, ORIENTATION_BREAKPOINTS, PrintHook, SERVER_TOKEN, ScreenTypes, StyleBuilder, StyleUtils, StylesheetMap, coerceArray, mergeAlias, removeStyles, sortAscendingPriority, sortDescendingPriority, validateBasis, MatchMedia as ɵMatchMedia, MockMatchMedia as ɵMockMatchMedia, MockMatchMediaProvider as ɵMockMatchMediaProvider, multiply as ɵmultiply };","map":{"version":3,"names":["i0","APP_BOOTSTRAP_LISTENER","PLATFORM_ID","NgModule","Injectable","InjectionToken","Inject","inject","Directive","isPlatformBrowser","DOCUMENT","isPlatformServer","BehaviorSubject","Observable","merge","Subject","asapScheduler","of","fromEvent","applyCssPrefixes","extendObject","buildLayoutCSS","filter","tap","debounceTime","switchMap","map","distinctUntilChanged","takeUntil","take","removeStyles","_document","platformId","elements","Array","from","querySelectorAll","CLASS_NAME","classRegex","forEach","el","classList","contains","parentNode","removeChild","className","replace","BROWSER_PROVIDER","provide","useFactory","deps","multi","CoreModule","ɵfac","CoreModule_Factory","t","ɵmod","ɵɵdefineNgModule","type","ɵinj","ɵɵdefineInjector","providers","ngDevMode","ɵsetClassMetadata","args","MediaChange","constructor","matches","mediaQuery","mqAlias","suffix","priority","property","clone","StylesheetMap","stylesheet","Map","addStyleToElement","element","style","value","get","set","clearStyles","clear","getStyleForElement","styleName","styles","StylesheetMap_Factory","ɵprov","ɵɵdefineInjectable","token","factory","providedIn","DEFAULT_CONFIG","addFlexToParent","addOrientationBps","disableDefaultBps","disableVendorPrefixes","serverLoaded","useColumnBasisZero","printWithBreakpoints","mediaTriggerAutoRestore","ssrObserveBreakpoints","multiplier","undefined","defaultUnit","detectLayoutDisplay","LAYOUT_CONFIG","SERVER_TOKEN","BREAKPOINT","mergeAlias","dest","source","alias","StyleBuilder","shouldCache","sideEffect","_input","_styles","_parent","StyleUtils","_serverStylesheet","_serverModuleLoaded","_platformId","layoutConfig","applyStyleToElement","_applyMultiValueStyleToElement","applyStyleToElements","getFlowDirection","target","query","lookupStyle","hasInlineValue","lookupInlineStyle","hasWrap","lookupAttributeValue","attribute","getAttribute","getPropertyValue","getServerStyle","inlineOnly","immediateValue","getComputedStyle","trim","Object","keys","sort","key","values","isArray","setProperty","setServerStyle","StyleUtils_Factory","ɵɵinject","decorators","styleMap","readStyleAttribute","styleValue","toLowerCase","writeStyleAttribute","styleAttrValue","newValue","setAttribute","styleAttribute","styleList","split","i","length","colonIndex","indexOf","Error","name","substr","sortDescendingPriority","a","b","priorityA","priorityB","sortAscendingPriority","pA","pB","MatchMedia","_zone","registry","pendingRemoveListenerFns","_observable$","asObservable","activations","results","mql","push","isActive","registerQuery","some","m","observe","mqList","filterOthers","matchMedia$","pipe","change","registration$","observer","lastChange","pop","e","next","complete","list","buildQueryCss","onMQLEvent","run","buildMQL","addListener","removeListener","ngOnDestroy","fn","constructMql","MatchMedia_Factory","NgZone","ALL_STYLES","mediaQueries","it","join","styleEl","createElement","styleSheet","cssText","appendChild","createTextNode","head","mq","console","error","buildMockMql","et","EventTarget","media","addEventListener","dispatchEvent","onchange","isBrowser","canListen","window","matchMedia","DEFAULT_BREAKPOINTS","overlapping","HANDSET_PORTRAIT","HANDSET_LANDSCAPE","TABLET_PORTRAIT","TABLET_LANDSCAPE","WEB_PORTRAIT","WEB_LANDSCAPE","ScreenTypes","ORIENTATION_BREAKPOINTS","HANDSET","TABLET","WEB","ALIAS_DELIMITERS","firstUpperCase","part","first","charAt","remainder","slice","toUpperCase","camelCase","validateSuffixes","bp","mergeByAlias","defaults","custom","dict","k","BREAKPOINTS","breakpoints","bpFlattenArray","concat","apply","v","builtIns","BreakPointRegistry","findByMap","items","findByAlias","findWithPredicate","findByQuery","overlappings","aliases","suffixes","searchFn","response","find","BreakPointRegistry_Factory","PRINT","BREAKPOINT_PRINT","PrintHook","registeredBeforeAfterPrintHooks","isPrintingBeforeAfterEvent","beforePrintEventListeners","afterPrintEventListeners","formerActivations","isPrinting","queue","PrintQueue","deactivations","withPrintQuery","queries","isPrintEvent","startsWith","printAlias","printBreakPoints","getEventBreakpoints","updateEvent","event","registerBeforeAfterPrintHooks","defaultView","beforePrintListener","startPrinting","updateStyles","afterPrintListener","stopPrinting","interceptEvents","collectActivations","blockPropagation","bpList","activatedBreakpoints","addPrintBreakpoints","hasFormerBp","includes","wasActivated","shouldDeactivate","l","removeEventListener","PrintHook_Factory","printBreakpoints","addBreakpoint","bpInList","isPrintBreakPoint","MediaMarshaller","hook","_useFallbacks","_activatedBreakpoints","elementMap","elementKeyMap","WeakMap","watcherMap","updateMap","clearMap","subject","observeActivations","activatedAlias","bps","useFallbacks","onMediaChange","mc","bpIndex","splice","init","updateFn","clearFn","extraTriggers","initBuilderMap","buildElementKeyMap","watchExtraTriggers","getValue","bpMap","getActivatedValues","hasValue","setValue","val","updateElement","trackValue","keyMap","Set","valueMap","delete","clearElement","builders","releaseElement","s","unsubscribe","_","triggerUpdate","add","triggers","watchers","subscription","newSubscription","subscribe","currentValue","activatedBp","has","lastHope","bind","MediaMarshaller_Factory","input","oldMap","BaseDirective2","elementRef","styleBuilder","styler","marshal","DIRECTIVE_KEY","inputs","mru","destroySubject","styleCache","parentElement","nativeElement","activatedValue","ngOnChanges","changes","updateWithValue","addStyles","parent","builder","useCache","genStyles","buildStyles","getFlexFlowDirection","addIfMissing","BaseDirective2_Factory","ɵɵdirectiveInject","ElementRef","ɵdir","ɵɵdefineDirective","features","ɵɵNgOnChangesFeature","MockMatchMedia","_breakpoints","autoRegisterQueries","useOverlaps","clearAll","destroy","activate","_validateQuery","_deactivateAll","_registerMediaQuery","_activateWithOverlaps","hasActivated","queryOrAlias","_activateByAlias","_activateByQuery","deactivate","MockMediaQueryList","MockMatchMedia_Factory","_mediaQuery","_isActive","_listeners","callback","cb","call","listener","MockMatchMediaProvider","useClass","coerceArray","MediaObserver","filterOverlaps","destroyed$","_media$","watchActivations","splitQueries","toMediaQuery","buildObservable","hasChanges","isValidQuery","excludeOverlaps","ignoreDuplicates","previous","current","previousMqs","currentMqs","difference","size","findAllActivations","mergeMQAlias","replaceWithPrintAlias","MediaObserver_Factory","locator","flatMap","MediaTrigger","hasCachedRegistryMatches","originalActivations","originalRegistry","saveActivations","deactivateAll","setActivations","prepareAutoRestore","restore","extractQuery","restoreRegistryMatches","resizeSubscription","enableAutoRestore","resize$","currentActivations","forceRegistryMatches","simulateMediaChanges","toMediaChange","cacheRegistryMatches","emitChangeEvent","MediaTrigger_Factory","validateBasis","basis","grow","shrink","parts","j","_validateCalcValue","substring","calc","MULTIPLIER_SUFFIX","multiply","transformValue","possibleValue","numberValue","endsWith","isNaN","unit","ɵMatchMedia","ɵMockMatchMedia","ɵMockMatchMediaProvider","ɵmultiply"],"sources":["C:/Users/VI_Pranav/Desktop/food-delivery-app/node_modules/@angular/flex-layout/fesm2020/angular-flex-layout-core.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { APP_BOOTSTRAP_LISTENER, PLATFORM_ID, NgModule, Injectable, InjectionToken, Inject, inject, Directive } from '@angular/core';\nimport { isPlatformBrowser, DOCUMENT, isPlatformServer } from '@angular/common';\nimport { BehaviorSubject, Observable, merge, Subject, asapScheduler, of, fromEvent } from 'rxjs';\nimport { applyCssPrefixes, extendObject, buildLayoutCSS } from '@angular/flex-layout/_private-utils';\nimport { filter, tap, debounceTime, switchMap, map, distinctUntilChanged, takeUntil, take } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Find all of the server-generated stylings, if any, and remove them\n * This will be in the form of inline classes and the style block in the\n * head of the DOM\n */\nfunction removeStyles(_document, platformId) {\n    return () => {\n        if (isPlatformBrowser(platformId)) {\n            const elements = Array.from(_document.querySelectorAll(`[class*=${CLASS_NAME}]`));\n            // RegExp constructor should only be used if passing a variable to the constructor.\n            // When using static regular expression it is more performant to use reg exp literal.\n            // This is also needed to provide Safari 9 compatibility, please see\n            // https://stackoverflow.com/questions/37919802 for more discussion.\n            const classRegex = /\\bflex-layout-.+?\\b/g;\n            elements.forEach(el => {\n                el.classList.contains(`${CLASS_NAME}ssr`) && el.parentNode ?\n                    el.parentNode.removeChild(el) : el.className.replace(classRegex, '');\n            });\n        }\n    };\n}\n/**\n *  Provider to remove SSR styles on the browser\n */\nconst BROWSER_PROVIDER = {\n    provide: APP_BOOTSTRAP_LISTENER,\n    useFactory: removeStyles,\n    deps: [DOCUMENT, PLATFORM_ID],\n    multi: true\n};\nconst CLASS_NAME = 'flex-layout-';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * *****************************************************************\n * Define module for common Angular Layout utilities\n * *****************************************************************\n */\nclass CoreModule {\n}\nCoreModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: CoreModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nCoreModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.0.2\", ngImport: i0, type: CoreModule });\nCoreModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: CoreModule, providers: [BROWSER_PROVIDER] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: CoreModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [BROWSER_PROVIDER]\n                }]\n        }] });\n\n/**\n * Class instances emitted [to observers] for each mql notification\n */\nclass MediaChange {\n    /**\n     * @param matches whether the mediaQuery is currently activated\n     * @param mediaQuery e.g. (min-width: 600px) and (max-width: 959px)\n     * @param mqAlias e.g. gt-sm, md, gt-lg\n     * @param suffix e.g. GtSM, Md, GtLg\n     * @param priority the priority of activation for the given breakpoint\n     */\n    constructor(matches = false, mediaQuery = 'all', mqAlias = '', suffix = '', priority = 0) {\n        this.matches = matches;\n        this.mediaQuery = mediaQuery;\n        this.mqAlias = mqAlias;\n        this.suffix = suffix;\n        this.priority = priority;\n        this.property = '';\n    }\n    /** Create an exact copy of the MediaChange */\n    clone() {\n        return new MediaChange(this.matches, this.mediaQuery, this.mqAlias, this.suffix);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Utility to emulate a CSS stylesheet\n *\n * This utility class stores all of the styles for a given HTML element\n * as a readonly `stylesheet` map.\n */\nclass StylesheetMap {\n    constructor() {\n        this.stylesheet = new Map();\n    }\n    /**\n     * Add an individual style to an HTML element\n     */\n    addStyleToElement(element, style, value) {\n        const stylesheet = this.stylesheet.get(element);\n        if (stylesheet) {\n            stylesheet.set(style, value);\n        }\n        else {\n            this.stylesheet.set(element, new Map([[style, value]]));\n        }\n    }\n    /**\n     * Clear the virtual stylesheet\n     */\n    clearStyles() {\n        this.stylesheet.clear();\n    }\n    /**\n     * Retrieve a given style for an HTML element\n     */\n    getStyleForElement(el, styleName) {\n        const styles = this.stylesheet.get(el);\n        let value = '';\n        if (styles) {\n            const style = styles.get(styleName);\n            if (typeof style === 'number' || typeof style === 'string') {\n                value = style + '';\n            }\n        }\n        return value;\n    }\n}\nStylesheetMap.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: StylesheetMap, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nStylesheetMap.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: StylesheetMap, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: StylesheetMap, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst DEFAULT_CONFIG = {\n    addFlexToParent: true,\n    addOrientationBps: false,\n    disableDefaultBps: false,\n    disableVendorPrefixes: false,\n    serverLoaded: false,\n    useColumnBasisZero: true,\n    printWithBreakpoints: [],\n    mediaTriggerAutoRestore: true,\n    ssrObserveBreakpoints: [],\n    // This is disabled by default because otherwise the multiplier would\n    // run for all users, regardless of whether they're using this feature.\n    // Instead, we disable it by default, which requires this ugly cast.\n    multiplier: undefined,\n    defaultUnit: 'px',\n    detectLayoutDisplay: false,\n};\nconst LAYOUT_CONFIG = new InjectionToken('Flex Layout token, config options for the library', {\n    providedIn: 'root',\n    factory: () => DEFAULT_CONFIG\n});\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Token that is provided to tell whether the FlexLayoutServerModule\n * has been included in the bundle\n *\n * NOTE: This can be manually provided to disable styles when using SSR\n */\nconst SERVER_TOKEN = new InjectionToken('FlexLayoutServerLoaded', {\n    providedIn: 'root',\n    factory: () => false\n});\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst BREAKPOINT = new InjectionToken('Flex Layout token, collect all breakpoints into one provider', {\n    providedIn: 'root',\n    factory: () => null\n});\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * For the specified MediaChange, make sure it contains the breakpoint alias\n * and suffix (if available).\n */\nfunction mergeAlias(dest, source) {\n    dest = dest?.clone() ?? new MediaChange();\n    if (source) {\n        dest.mqAlias = source.alias;\n        dest.mediaQuery = source.mediaQuery;\n        dest.suffix = source.suffix;\n        dest.priority = source.priority;\n    }\n    return dest;\n}\n\n/** A class that encapsulates CSS style generation for common directives */\nclass StyleBuilder {\n    constructor() {\n        /** Whether to cache the generated output styles */\n        this.shouldCache = true;\n    }\n    /**\n     * Run a side effect computation given the input string and the computed styles\n     * from the build task and the host configuration object\n     * NOTE: This should be a no-op unless an algorithm is provided in a subclass\n     */\n    sideEffect(_input, _styles, _parent) {\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass StyleUtils {\n    constructor(_serverStylesheet, _serverModuleLoaded, _platformId, layoutConfig) {\n        this._serverStylesheet = _serverStylesheet;\n        this._serverModuleLoaded = _serverModuleLoaded;\n        this._platformId = _platformId;\n        this.layoutConfig = layoutConfig;\n    }\n    /**\n     * Applies styles given via string pair or object map to the directive element\n     */\n    applyStyleToElement(element, style, value = null) {\n        let styles = {};\n        if (typeof style === 'string') {\n            styles[style] = value;\n            style = styles;\n        }\n        styles = this.layoutConfig.disableVendorPrefixes ? style : applyCssPrefixes(style);\n        this._applyMultiValueStyleToElement(styles, element);\n    }\n    /**\n     * Applies styles given via string pair or object map to the directive's element\n     */\n    applyStyleToElements(style, elements = []) {\n        const styles = this.layoutConfig.disableVendorPrefixes ? style : applyCssPrefixes(style);\n        elements.forEach(el => {\n            this._applyMultiValueStyleToElement(styles, el);\n        });\n    }\n    /**\n     * Determine the DOM element's Flexbox flow (flex-direction)\n     *\n     * Check inline style first then check computed (stylesheet) style\n     */\n    getFlowDirection(target) {\n        const query = 'flex-direction';\n        let value = this.lookupStyle(target, query);\n        const hasInlineValue = this.lookupInlineStyle(target, query) ||\n            (isPlatformServer(this._platformId) && this._serverModuleLoaded) ? value : '';\n        return [value || 'row', hasInlineValue];\n    }\n    hasWrap(target) {\n        const query = 'flex-wrap';\n        return this.lookupStyle(target, query) === 'wrap';\n    }\n    /**\n     * Find the DOM element's raw attribute value (if any)\n     */\n    lookupAttributeValue(element, attribute) {\n        return element.getAttribute(attribute) ?? '';\n    }\n    /**\n     * Find the DOM element's inline style value (if any)\n     */\n    lookupInlineStyle(element, styleName) {\n        return isPlatformBrowser(this._platformId) ?\n            element.style.getPropertyValue(styleName) : getServerStyle(element, styleName);\n    }\n    /**\n     * Determine the inline or inherited CSS style\n     * NOTE: platform-server has no implementation for getComputedStyle\n     */\n    lookupStyle(element, styleName, inlineOnly = false) {\n        let value = '';\n        if (element) {\n            let immediateValue = value = this.lookupInlineStyle(element, styleName);\n            if (!immediateValue) {\n                if (isPlatformBrowser(this._platformId)) {\n                    if (!inlineOnly) {\n                        value = getComputedStyle(element).getPropertyValue(styleName);\n                    }\n                }\n                else {\n                    if (this._serverModuleLoaded) {\n                        value = this._serverStylesheet.getStyleForElement(element, styleName);\n                    }\n                }\n            }\n        }\n        // Note: 'inline' is the default of all elements, unless UA stylesheet overrides;\n        //       in which case getComputedStyle() should determine a valid value.\n        return value ? value.trim() : '';\n    }\n    /**\n     * Applies the styles to the element. The styles object map may contain an array of values\n     * Each value will be added as element style\n     * Keys are sorted to add prefixed styles (like -webkit-x) first, before the standard ones\n     */\n    _applyMultiValueStyleToElement(styles, element) {\n        Object.keys(styles).sort().forEach(key => {\n            const el = styles[key];\n            const values = Array.isArray(el) ? el : [el];\n            values.sort();\n            for (let value of values) {\n                value = value ? value + '' : '';\n                if (isPlatformBrowser(this._platformId) || !this._serverModuleLoaded) {\n                    isPlatformBrowser(this._platformId) ?\n                        element.style.setProperty(key, value) : setServerStyle(element, key, value);\n                }\n                else {\n                    this._serverStylesheet.addStyleToElement(element, key, value);\n                }\n            }\n        });\n    }\n}\nStyleUtils.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: StyleUtils, deps: [{ token: StylesheetMap }, { token: SERVER_TOKEN }, { token: PLATFORM_ID }, { token: LAYOUT_CONFIG }], target: i0.ɵɵFactoryTarget.Injectable });\nStyleUtils.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: StyleUtils, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: StyleUtils, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: StylesheetMap }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [SERVER_TOKEN]\n                }] }, { type: Object, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [LAYOUT_CONFIG]\n                }] }]; } });\nfunction getServerStyle(element, styleName) {\n    const styleMap = readStyleAttribute(element);\n    return styleMap[styleName] ?? '';\n}\nfunction setServerStyle(element, styleName, styleValue) {\n    styleName = styleName.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n    const styleMap = readStyleAttribute(element);\n    styleMap[styleName] = styleValue ?? '';\n    writeStyleAttribute(element, styleMap);\n}\nfunction writeStyleAttribute(element, styleMap) {\n    let styleAttrValue = '';\n    for (const key in styleMap) {\n        const newValue = styleMap[key];\n        if (newValue) {\n            styleAttrValue += `${key}:${styleMap[key]};`;\n        }\n    }\n    element.setAttribute('style', styleAttrValue);\n}\nfunction readStyleAttribute(element) {\n    const styleMap = {};\n    const styleAttribute = element.getAttribute('style');\n    if (styleAttribute) {\n        const styleList = styleAttribute.split(/;+/g);\n        for (let i = 0; i < styleList.length; i++) {\n            const style = styleList[i].trim();\n            if (style.length > 0) {\n                const colonIndex = style.indexOf(':');\n                if (colonIndex === -1) {\n                    throw new Error(`Invalid CSS style: ${style}`);\n                }\n                const name = style.substr(0, colonIndex).trim();\n                styleMap[name] = style.substr(colonIndex + 1).trim();\n            }\n        }\n    }\n    return styleMap;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** HOF to sort the breakpoints by descending priority */\nfunction sortDescendingPriority(a, b) {\n    const priorityA = a ? a.priority || 0 : 0;\n    const priorityB = b ? b.priority || 0 : 0;\n    return priorityB - priorityA;\n}\n/** HOF to sort the breakpoints by ascending priority */\nfunction sortAscendingPriority(a, b) {\n    const pA = a.priority || 0;\n    const pB = b.priority || 0;\n    return pA - pB;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * MediaMonitor configures listeners to mediaQuery changes and publishes an Observable facade to\n * convert mediaQuery change callbacks to subscriber notifications. These notifications will be\n * performed within the ng Zone to trigger change detections and component updates.\n *\n * NOTE: both mediaQuery activations and de-activations are announced in notifications\n */\nclass MatchMedia {\n    constructor(_zone, _platformId, _document) {\n        this._zone = _zone;\n        this._platformId = _platformId;\n        this._document = _document;\n        /** Initialize source with 'all' so all non-responsive APIs trigger style updates */\n        this.source = new BehaviorSubject(new MediaChange(true));\n        this.registry = new Map();\n        this.pendingRemoveListenerFns = [];\n        this._observable$ = this.source.asObservable();\n    }\n    /**\n     * Publish list of all current activations\n     */\n    get activations() {\n        const results = [];\n        this.registry.forEach((mql, key) => {\n            if (mql.matches) {\n                results.push(key);\n            }\n        });\n        return results;\n    }\n    /**\n     * For the specified mediaQuery?\n     */\n    isActive(mediaQuery) {\n        const mql = this.registry.get(mediaQuery);\n        return mql?.matches ?? this.registerQuery(mediaQuery).some(m => m.matches);\n    }\n    /**\n     * External observers can watch for all (or a specific) mql changes.\n     * Typically used by the MediaQueryAdaptor; optionally available to components\n     * who wish to use the MediaMonitor as mediaMonitor$ observable service.\n     *\n     * Use deferred registration process to register breakpoints only on subscription\n     * This logic also enforces logic to register all mediaQueries BEFORE notify\n     * subscribers of notifications.\n     */\n    observe(mqList, filterOthers = false) {\n        if (mqList && mqList.length) {\n            const matchMedia$ = this._observable$.pipe(filter((change) => !filterOthers ? true : (mqList.indexOf(change.mediaQuery) > -1)));\n            const registration$ = new Observable((observer) => {\n                const matches = this.registerQuery(mqList);\n                if (matches.length) {\n                    const lastChange = matches.pop();\n                    matches.forEach((e) => {\n                        observer.next(e);\n                    });\n                    this.source.next(lastChange); // last match is cached\n                }\n                observer.complete();\n            });\n            return merge(registration$, matchMedia$);\n        }\n        return this._observable$;\n    }\n    /**\n     * Based on the BreakPointRegistry provider, register internal listeners for each unique\n     * mediaQuery. Each listener emits specific MediaChange data to observers\n     */\n    registerQuery(mediaQuery) {\n        const list = Array.isArray(mediaQuery) ? mediaQuery : [mediaQuery];\n        const matches = [];\n        buildQueryCss(list, this._document);\n        list.forEach((query) => {\n            const onMQLEvent = (e) => {\n                this._zone.run(() => this.source.next(new MediaChange(e.matches, query)));\n            };\n            let mql = this.registry.get(query);\n            if (!mql) {\n                mql = this.buildMQL(query);\n                mql.addListener(onMQLEvent);\n                this.pendingRemoveListenerFns.push(() => mql.removeListener(onMQLEvent));\n                this.registry.set(query, mql);\n            }\n            if (mql.matches) {\n                matches.push(new MediaChange(true, query));\n            }\n        });\n        return matches;\n    }\n    ngOnDestroy() {\n        let fn;\n        while (fn = this.pendingRemoveListenerFns.pop()) {\n            fn();\n        }\n    }\n    /**\n     * Call window.matchMedia() to build a MediaQueryList; which\n     * supports 0..n listeners for activation/deactivation\n     */\n    buildMQL(query) {\n        return constructMql(query, isPlatformBrowser(this._platformId));\n    }\n}\nMatchMedia.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: MatchMedia, deps: [{ token: i0.NgZone }, { token: PLATFORM_ID }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });\nMatchMedia.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: MatchMedia, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: MatchMedia, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: Object, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; } });\n/**\n * Private global registry for all dynamically-created, injected style tags\n * @see prepare(query)\n */\nconst ALL_STYLES = {};\n/**\n * For Webkit engines that only trigger the MediaQueryList Listener\n * when there is at least one CSS selector for the respective media query.\n *\n * @param mediaQueries\n * @param _document\n */\nfunction buildQueryCss(mediaQueries, _document) {\n    const list = mediaQueries.filter(it => !ALL_STYLES[it]);\n    if (list.length > 0) {\n        const query = list.join(', ');\n        try {\n            const styleEl = _document.createElement('style');\n            styleEl.setAttribute('type', 'text/css');\n            if (!styleEl.styleSheet) {\n                const cssText = `\n/*\n  @angular/flex-layout - workaround for possible browser quirk with mediaQuery listeners\n  see http://bit.ly/2sd4HMP\n*/\n@media ${query} {.fx-query-test{ }}\n`;\n                styleEl.appendChild(_document.createTextNode(cssText));\n            }\n            _document.head.appendChild(styleEl);\n            // Store in private global registry\n            list.forEach(mq => ALL_STYLES[mq] = styleEl);\n        }\n        catch (e) {\n            console.error(e);\n        }\n    }\n}\nfunction buildMockMql(query) {\n    const et = new EventTarget();\n    et.matches = query === 'all' || query === '';\n    et.media = query;\n    et.addListener = () => { };\n    et.removeListener = () => { };\n    et.addEventListener = () => { };\n    et.dispatchEvent = () => false;\n    et.onchange = null;\n    return et;\n}\nfunction constructMql(query, isBrowser) {\n    const canListen = isBrowser && !!window.matchMedia('all').addListener;\n    return canListen ? window.matchMedia(query) : buildMockMql(query);\n}\n\n/**\n * NOTE: Smaller ranges have HIGHER priority since the match is more specific\n */\nconst DEFAULT_BREAKPOINTS = [\n    {\n        alias: 'xs',\n        mediaQuery: 'screen and (min-width: 0px) and (max-width: 599.98px)',\n        priority: 1000,\n    },\n    {\n        alias: 'sm',\n        mediaQuery: 'screen and (min-width: 600px) and (max-width: 959.98px)',\n        priority: 900,\n    },\n    {\n        alias: 'md',\n        mediaQuery: 'screen and (min-width: 960px) and (max-width: 1279.98px)',\n        priority: 800,\n    },\n    {\n        alias: 'lg',\n        mediaQuery: 'screen and (min-width: 1280px) and (max-width: 1919.98px)',\n        priority: 700,\n    },\n    {\n        alias: 'xl',\n        mediaQuery: 'screen and (min-width: 1920px) and (max-width: 4999.98px)',\n        priority: 600,\n    },\n    {\n        alias: 'lt-sm',\n        overlapping: true,\n        mediaQuery: 'screen and (max-width: 599.98px)',\n        priority: 950,\n    },\n    {\n        alias: 'lt-md',\n        overlapping: true,\n        mediaQuery: 'screen and (max-width: 959.98px)',\n        priority: 850,\n    },\n    {\n        alias: 'lt-lg',\n        overlapping: true,\n        mediaQuery: 'screen and (max-width: 1279.98px)',\n        priority: 750,\n    },\n    {\n        alias: 'lt-xl',\n        overlapping: true,\n        priority: 650,\n        mediaQuery: 'screen and (max-width: 1919.98px)',\n    },\n    {\n        alias: 'gt-xs',\n        overlapping: true,\n        mediaQuery: 'screen and (min-width: 600px)',\n        priority: -950,\n    },\n    {\n        alias: 'gt-sm',\n        overlapping: true,\n        mediaQuery: 'screen and (min-width: 960px)',\n        priority: -850,\n    }, {\n        alias: 'gt-md',\n        overlapping: true,\n        mediaQuery: 'screen and (min-width: 1280px)',\n        priority: -750,\n    },\n    {\n        alias: 'gt-lg',\n        overlapping: true,\n        mediaQuery: 'screen and (min-width: 1920px)',\n        priority: -650,\n    }\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/* tslint:disable */\nconst HANDSET_PORTRAIT = '(orientation: portrait) and (max-width: 599.98px)';\nconst HANDSET_LANDSCAPE = '(orientation: landscape) and (max-width: 959.98px)';\nconst TABLET_PORTRAIT = '(orientation: portrait) and (min-width: 600px) and (max-width: 839.98px)';\nconst TABLET_LANDSCAPE = '(orientation: landscape) and (min-width: 960px) and (max-width: 1279.98px)';\nconst WEB_PORTRAIT = '(orientation: portrait) and (min-width: 840px)';\nconst WEB_LANDSCAPE = '(orientation: landscape) and (min-width: 1280px)';\nconst ScreenTypes = {\n    'HANDSET': `${HANDSET_PORTRAIT}, ${HANDSET_LANDSCAPE}`,\n    'TABLET': `${TABLET_PORTRAIT} , ${TABLET_LANDSCAPE}`,\n    'WEB': `${WEB_PORTRAIT}, ${WEB_LANDSCAPE} `,\n    'HANDSET_PORTRAIT': `${HANDSET_PORTRAIT}`,\n    'TABLET_PORTRAIT': `${TABLET_PORTRAIT} `,\n    'WEB_PORTRAIT': `${WEB_PORTRAIT}`,\n    'HANDSET_LANDSCAPE': `${HANDSET_LANDSCAPE}`,\n    'TABLET_LANDSCAPE': `${TABLET_LANDSCAPE}`,\n    'WEB_LANDSCAPE': `${WEB_LANDSCAPE}`\n};\n/**\n * Extended Breakpoints for handset/tablets with landscape or portrait orientations\n */\nconst ORIENTATION_BREAKPOINTS = [\n    { 'alias': 'handset', priority: 2000, 'mediaQuery': ScreenTypes.HANDSET },\n    { 'alias': 'handset.landscape', priority: 2000, 'mediaQuery': ScreenTypes.HANDSET_LANDSCAPE },\n    { 'alias': 'handset.portrait', priority: 2000, 'mediaQuery': ScreenTypes.HANDSET_PORTRAIT },\n    { 'alias': 'tablet', priority: 2100, 'mediaQuery': ScreenTypes.TABLET },\n    { 'alias': 'tablet.landscape', priority: 2100, 'mediaQuery': ScreenTypes.TABLET_LANDSCAPE },\n    { 'alias': 'tablet.portrait', priority: 2100, 'mediaQuery': ScreenTypes.TABLET_PORTRAIT },\n    { 'alias': 'web', priority: 2200, 'mediaQuery': ScreenTypes.WEB, overlapping: true },\n    { 'alias': 'web.landscape', priority: 2200, 'mediaQuery': ScreenTypes.WEB_LANDSCAPE, overlapping: true },\n    { 'alias': 'web.portrait', priority: 2200, 'mediaQuery': ScreenTypes.WEB_PORTRAIT, overlapping: true }\n];\n\nconst ALIAS_DELIMITERS = /(\\.|-|_)/g;\nfunction firstUpperCase(part) {\n    let first = part.length > 0 ? part.charAt(0) : '';\n    let remainder = (part.length > 1) ? part.slice(1) : '';\n    return first.toUpperCase() + remainder;\n}\n/**\n * Converts snake-case to SnakeCase.\n * @param name Text to UpperCamelCase\n */\nfunction camelCase(name) {\n    return name\n        .replace(ALIAS_DELIMITERS, '|')\n        .split('|')\n        .map(firstUpperCase)\n        .join('');\n}\n/**\n * For each breakpoint, ensure that a Suffix is defined;\n * fallback to UpperCamelCase the unique Alias value\n */\nfunction validateSuffixes(list) {\n    list.forEach((bp) => {\n        if (!bp.suffix) {\n            bp.suffix = camelCase(bp.alias); // create Suffix value based on alias\n            bp.overlapping = !!bp.overlapping; // ensure default value\n        }\n    });\n    return list;\n}\n/**\n * Merge a custom breakpoint list with the default list based on unique alias values\n *  - Items are added if the alias is not in the default list\n *  - Items are merged with the custom override if the alias exists in the default list\n */\nfunction mergeByAlias(defaults, custom = []) {\n    const dict = {};\n    defaults.forEach(bp => {\n        dict[bp.alias] = bp;\n    });\n    // Merge custom breakpoints\n    custom.forEach((bp) => {\n        if (dict[bp.alias]) {\n            extendObject(dict[bp.alias], bp);\n        }\n        else {\n            dict[bp.alias] = bp;\n        }\n    });\n    return validateSuffixes(Object.keys(dict).map(k => dict[k]));\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n *  Injection token unique to the flex-layout library.\n *  Use this token when build a custom provider (see below).\n */\nconst BREAKPOINTS = new InjectionToken('Token (@angular/flex-layout) Breakpoints', {\n    providedIn: 'root',\n    factory: () => {\n        const breakpoints = inject(BREAKPOINT);\n        const layoutConfig = inject(LAYOUT_CONFIG);\n        const bpFlattenArray = [].concat.apply([], (breakpoints || [])\n            .map((v) => Array.isArray(v) ? v : [v]));\n        const builtIns = (layoutConfig.disableDefaultBps ? [] : DEFAULT_BREAKPOINTS)\n            .concat(layoutConfig.addOrientationBps ? ORIENTATION_BREAKPOINTS : []);\n        return mergeByAlias(builtIns, bpFlattenArray);\n    }\n});\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Registry of 1..n MediaQuery breakpoint ranges\n * This is published as a provider and may be overridden from custom, application-specific ranges\n *\n */\nclass BreakPointRegistry {\n    constructor(list) {\n        /**\n         * Memoized BreakPoint Lookups\n         */\n        this.findByMap = new Map();\n        this.items = [...list].sort(sortAscendingPriority);\n    }\n    /**\n     * Search breakpoints by alias (e.g. gt-xs)\n     */\n    findByAlias(alias) {\n        return !alias ? null : this.findWithPredicate(alias, (bp) => bp.alias === alias);\n    }\n    findByQuery(query) {\n        return this.findWithPredicate(query, (bp) => bp.mediaQuery === query);\n    }\n    /**\n     * Get all the breakpoints whose ranges could overlapping `normal` ranges;\n     * e.g. gt-sm overlaps md, lg, and xl\n     */\n    get overlappings() {\n        return this.items.filter(it => it.overlapping);\n    }\n    /**\n     * Get list of all registered (non-empty) breakpoint aliases\n     */\n    get aliases() {\n        return this.items.map(it => it.alias);\n    }\n    /**\n     * Aliases are mapped to properties using suffixes\n     * e.g.  'gt-sm' for property 'layout'  uses suffix 'GtSm'\n     * for property layoutGtSM.\n     */\n    get suffixes() {\n        return this.items.map(it => it?.suffix ?? '');\n    }\n    /**\n     * Memoized lookup using custom predicate function\n     */\n    findWithPredicate(key, searchFn) {\n        let response = this.findByMap.get(key);\n        if (!response) {\n            response = this.items.find(searchFn) ?? null;\n            this.findByMap.set(key, response);\n        }\n        return response ?? null;\n    }\n}\nBreakPointRegistry.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: BreakPointRegistry, deps: [{ token: BREAKPOINTS }], target: i0.ɵɵFactoryTarget.Injectable });\nBreakPointRegistry.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: BreakPointRegistry, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: BreakPointRegistry, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [BREAKPOINTS]\n                }] }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst PRINT = 'print';\nconst BREAKPOINT_PRINT = {\n    alias: PRINT,\n    mediaQuery: PRINT,\n    priority: 1000\n};\n/**\n * PrintHook - Use to intercept print MediaQuery activations and force\n *             layouts to render with the specified print alias/breakpoint\n *\n * Used in MediaMarshaller and MediaObserver\n */\nclass PrintHook {\n    constructor(breakpoints, layoutConfig, _document) {\n        this.breakpoints = breakpoints;\n        this.layoutConfig = layoutConfig;\n        this._document = _document;\n        // registeredBeforeAfterPrintHooks tracks if we registered the `beforeprint`\n        //  and `afterprint` event listeners.\n        this.registeredBeforeAfterPrintHooks = false;\n        // isPrintingBeforeAfterEvent is used to track if we are printing from within\n        // a `beforeprint` event handler. This prevents the typical `stopPrinting`\n        // form `interceptEvents` so that printing is not stopped while the dialog\n        // is still open. This is an extension of the `isPrinting` property on\n        // browsers which support `beforeprint` and `afterprint` events.\n        this.isPrintingBeforeAfterEvent = false;\n        this.beforePrintEventListeners = [];\n        this.afterPrintEventListeners = [];\n        this.formerActivations = null;\n        // Is this service currently in print mode\n        this.isPrinting = false;\n        this.queue = new PrintQueue();\n        this.deactivations = [];\n    }\n    /** Add 'print' mediaQuery: to listen for matchMedia activations */\n    withPrintQuery(queries) {\n        return [...queries, PRINT];\n    }\n    /** Is the MediaChange event for any 'print' @media */\n    isPrintEvent(e) {\n        return e.mediaQuery.startsWith(PRINT);\n    }\n    /** What is the desired mqAlias to use while printing? */\n    get printAlias() {\n        return [...(this.layoutConfig.printWithBreakpoints ?? [])];\n    }\n    /** Lookup breakpoints associated with print aliases. */\n    get printBreakPoints() {\n        return this.printAlias\n            .map(alias => this.breakpoints.findByAlias(alias))\n            .filter(bp => bp !== null);\n    }\n    /** Lookup breakpoint associated with mediaQuery */\n    getEventBreakpoints({ mediaQuery }) {\n        const bp = this.breakpoints.findByQuery(mediaQuery);\n        const list = bp ? [...this.printBreakPoints, bp] : this.printBreakPoints;\n        return list.sort(sortDescendingPriority);\n    }\n    /** Update event with printAlias mediaQuery information */\n    updateEvent(event) {\n        let bp = this.breakpoints.findByQuery(event.mediaQuery);\n        if (this.isPrintEvent(event)) {\n            // Reset from 'print' to first (highest priority) print breakpoint\n            bp = this.getEventBreakpoints(event)[0];\n            event.mediaQuery = bp?.mediaQuery ?? '';\n        }\n        return mergeAlias(event, bp);\n    }\n    // registerBeforeAfterPrintHooks registers a `beforeprint` event hook so we can\n    // trigger print styles synchronously and apply proper layout styles.\n    // It is a noop if the hooks have already been registered or if the document's\n    // `defaultView` is not available.\n    registerBeforeAfterPrintHooks(target) {\n        // `defaultView` may be null when rendering on the server or in other contexts.\n        if (!this._document.defaultView || this.registeredBeforeAfterPrintHooks) {\n            return;\n        }\n        this.registeredBeforeAfterPrintHooks = true;\n        const beforePrintListener = () => {\n            // If we aren't already printing, start printing and update the styles as\n            // if there was a regular print `MediaChange`(from matchMedia).\n            if (!this.isPrinting) {\n                this.isPrintingBeforeAfterEvent = true;\n                this.startPrinting(target, this.getEventBreakpoints(new MediaChange(true, PRINT)));\n                target.updateStyles();\n            }\n        };\n        const afterPrintListener = () => {\n            // If we aren't already printing, start printing and update the styles as\n            // if there was a regular print `MediaChange`(from matchMedia).\n            this.isPrintingBeforeAfterEvent = false;\n            if (this.isPrinting) {\n                this.stopPrinting(target);\n                target.updateStyles();\n            }\n        };\n        // Could we have teardown logic to remove if there are no print listeners being used?\n        this._document.defaultView.addEventListener('beforeprint', beforePrintListener);\n        this._document.defaultView.addEventListener('afterprint', afterPrintListener);\n        this.beforePrintEventListeners.push(beforePrintListener);\n        this.afterPrintEventListeners.push(afterPrintListener);\n    }\n    /**\n     * Prepare RxJS tap operator with partial application\n     * @return pipeable tap predicate\n     */\n    interceptEvents(target) {\n        return (event) => {\n            if (this.isPrintEvent(event)) {\n                if (event.matches && !this.isPrinting) {\n                    this.startPrinting(target, this.getEventBreakpoints(event));\n                    target.updateStyles();\n                }\n                else if (!event.matches && this.isPrinting && !this.isPrintingBeforeAfterEvent) {\n                    this.stopPrinting(target);\n                    target.updateStyles();\n                }\n                return;\n            }\n            this.collectActivations(target, event);\n        };\n    }\n    /** Stop mediaChange event propagation in event streams */\n    blockPropagation() {\n        return (event) => {\n            return !(this.isPrinting || this.isPrintEvent(event));\n        };\n    }\n    /**\n     * Save current activateBreakpoints (for later restore)\n     * and substitute only the printAlias breakpoint\n     */\n    startPrinting(target, bpList) {\n        this.isPrinting = true;\n        this.formerActivations = target.activatedBreakpoints;\n        target.activatedBreakpoints = this.queue.addPrintBreakpoints(bpList);\n    }\n    /** For any print de-activations, reset the entire print queue */\n    stopPrinting(target) {\n        target.activatedBreakpoints = this.deactivations;\n        this.deactivations = [];\n        this.formerActivations = null;\n        this.queue.clear();\n        this.isPrinting = false;\n    }\n    /**\n     * To restore pre-Print Activations, we must capture the proper\n     * list of breakpoint activations BEFORE print starts. OnBeforePrint()\n     * is supported; so 'print' mediaQuery activations are used as a fallback\n     * in browsers without `beforeprint` support.\n     *\n     * >  But activated breakpoints are deactivated BEFORE 'print' activation.\n     *\n     * Let's capture all de-activations using the following logic:\n     *\n     *  When not printing:\n     *    - clear cache when activating non-print breakpoint\n     *    - update cache (and sort) when deactivating\n     *\n     *  When printing:\n     *    - sort and save when starting print\n     *    - restore as activatedTargets and clear when stop printing\n     */\n    collectActivations(target, event) {\n        if (!this.isPrinting || this.isPrintingBeforeAfterEvent) {\n            if (!this.isPrintingBeforeAfterEvent) {\n                // Only clear deactivations if we aren't printing from a `beforeprint` event.\n                // Otherwise, this will clear before `stopPrinting()` is called to restore\n                // the pre-Print Activations.\n                this.deactivations = [];\n                return;\n            }\n            if (!event.matches) {\n                const bp = this.breakpoints.findByQuery(event.mediaQuery);\n                // Deactivating a breakpoint\n                if (bp) {\n                    const hasFormerBp = this.formerActivations && this.formerActivations.includes(bp);\n                    const wasActivated = !this.formerActivations && target.activatedBreakpoints.includes(bp);\n                    const shouldDeactivate = hasFormerBp || wasActivated;\n                    if (shouldDeactivate) {\n                        this.deactivations.push(bp);\n                        this.deactivations.sort(sortDescendingPriority);\n                    }\n                }\n            }\n        }\n    }\n    /** Teardown logic for the service. */\n    ngOnDestroy() {\n        if (this._document.defaultView) {\n            this.beforePrintEventListeners.forEach(l => this._document.defaultView.removeEventListener('beforeprint', l));\n            this.afterPrintEventListeners.forEach(l => this._document.defaultView.removeEventListener('afterprint', l));\n        }\n    }\n}\nPrintHook.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: PrintHook, deps: [{ token: BreakPointRegistry }, { token: LAYOUT_CONFIG }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });\nPrintHook.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: PrintHook, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: PrintHook, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: BreakPointRegistry }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [LAYOUT_CONFIG]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; } });\n// ************************************************************************\n// Internal Utility class 'PrintQueue'\n// ************************************************************************\n/**\n * Utility class to manage print breakpoints + activatedBreakpoints\n * with correct sorting WHILE printing\n */\nclass PrintQueue {\n    constructor() {\n        /** Sorted queue with prioritized print breakpoints */\n        this.printBreakpoints = [];\n    }\n    addPrintBreakpoints(bpList) {\n        bpList.push(BREAKPOINT_PRINT);\n        bpList.sort(sortDescendingPriority);\n        bpList.forEach(bp => this.addBreakpoint(bp));\n        return this.printBreakpoints;\n    }\n    /** Add Print breakpoint to queue */\n    addBreakpoint(bp) {\n        if (!!bp) {\n            const bpInList = this.printBreakpoints.find(it => it.mediaQuery === bp.mediaQuery);\n            if (bpInList === undefined) {\n                // If this is a `printAlias` breakpoint, then append. If a true 'print' breakpoint,\n                // register as highest priority in the queue\n                this.printBreakpoints = isPrintBreakPoint(bp) ? [bp, ...this.printBreakpoints]\n                    : [...this.printBreakpoints, bp];\n            }\n        }\n    }\n    /** Restore original activated breakpoints and clear internal caches */\n    clear() {\n        this.printBreakpoints = [];\n    }\n}\n// ************************************************************************\n// Internal Utility methods\n// ************************************************************************\n/** Only support intercept queueing if the Breakpoint is a print @media query */\nfunction isPrintBreakPoint(bp) {\n    return bp?.mediaQuery.startsWith(PRINT) ?? false;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * MediaMarshaller - register responsive values from directives and\n *                   trigger them based on media query events\n */\nclass MediaMarshaller {\n    constructor(matchMedia, breakpoints, hook) {\n        this.matchMedia = matchMedia;\n        this.breakpoints = breakpoints;\n        this.hook = hook;\n        this._useFallbacks = true;\n        this._activatedBreakpoints = [];\n        this.elementMap = new Map();\n        this.elementKeyMap = new WeakMap();\n        this.watcherMap = new WeakMap(); // special triggers to update elements\n        this.updateMap = new WeakMap(); // callback functions to update styles\n        this.clearMap = new WeakMap(); // callback functions to clear styles\n        this.subject = new Subject();\n        this.observeActivations();\n    }\n    get activatedAlias() {\n        return this.activatedBreakpoints[0]?.alias ?? '';\n    }\n    set activatedBreakpoints(bps) {\n        this._activatedBreakpoints = [...bps];\n    }\n    get activatedBreakpoints() {\n        return [...this._activatedBreakpoints];\n    }\n    set useFallbacks(value) {\n        this._useFallbacks = value;\n    }\n    /**\n     * Update styles on breakpoint activates or deactivates\n     * @param mc\n     */\n    onMediaChange(mc) {\n        const bp = this.findByQuery(mc.mediaQuery);\n        if (bp) {\n            mc = mergeAlias(mc, bp);\n            const bpIndex = this.activatedBreakpoints.indexOf(bp);\n            if (mc.matches && bpIndex === -1) {\n                this._activatedBreakpoints.push(bp);\n                this._activatedBreakpoints.sort(sortDescendingPriority);\n                this.updateStyles();\n            }\n            else if (!mc.matches && bpIndex !== -1) {\n                // Remove the breakpoint when it's deactivated\n                this._activatedBreakpoints.splice(bpIndex, 1);\n                this._activatedBreakpoints.sort(sortDescendingPriority);\n                this.updateStyles();\n            }\n        }\n    }\n    /**\n     * initialize the marshaller with necessary elements for delegation on an element\n     * @param element\n     * @param key\n     * @param updateFn optional callback so that custom bp directives don't have to re-provide this\n     * @param clearFn optional callback so that custom bp directives don't have to re-provide this\n     * @param extraTriggers other triggers to force style updates (e.g. layout, directionality, etc)\n     */\n    init(element, key, updateFn, clearFn, extraTriggers = []) {\n        initBuilderMap(this.updateMap, element, key, updateFn);\n        initBuilderMap(this.clearMap, element, key, clearFn);\n        this.buildElementKeyMap(element, key);\n        this.watchExtraTriggers(element, key, extraTriggers);\n    }\n    /**\n     * get the value for an element and key and optionally a given breakpoint\n     * @param element\n     * @param key\n     * @param bp\n     */\n    getValue(element, key, bp) {\n        const bpMap = this.elementMap.get(element);\n        if (bpMap) {\n            const values = bp !== undefined ? bpMap.get(bp) : this.getActivatedValues(bpMap, key);\n            if (values) {\n                return values.get(key);\n            }\n        }\n        return undefined;\n    }\n    /**\n     * whether the element has values for a given key\n     * @param element\n     * @param key\n     */\n    hasValue(element, key) {\n        const bpMap = this.elementMap.get(element);\n        if (bpMap) {\n            const values = this.getActivatedValues(bpMap, key);\n            if (values) {\n                return values.get(key) !== undefined || false;\n            }\n        }\n        return false;\n    }\n    /**\n     * Set the value for an input on a directive\n     * @param element the element in question\n     * @param key the type of the directive (e.g. flex, layout-gap, etc)\n     * @param bp the breakpoint suffix (empty string = default)\n     * @param val the value for the breakpoint\n     */\n    setValue(element, key, val, bp) {\n        let bpMap = this.elementMap.get(element);\n        if (!bpMap) {\n            bpMap = new Map().set(bp, new Map().set(key, val));\n            this.elementMap.set(element, bpMap);\n        }\n        else {\n            const values = (bpMap.get(bp) ?? new Map()).set(key, val);\n            bpMap.set(bp, values);\n            this.elementMap.set(element, bpMap);\n        }\n        const value = this.getValue(element, key);\n        if (value !== undefined) {\n            this.updateElement(element, key, value);\n        }\n    }\n    /** Track element value changes for a specific key */\n    trackValue(element, key) {\n        return this.subject\n            .asObservable()\n            .pipe(filter(v => v.element === element && v.key === key));\n    }\n    /** update all styles for all elements on the current breakpoint */\n    updateStyles() {\n        this.elementMap.forEach((bpMap, el) => {\n            const keyMap = new Set(this.elementKeyMap.get(el));\n            let valueMap = this.getActivatedValues(bpMap);\n            if (valueMap) {\n                valueMap.forEach((v, k) => {\n                    this.updateElement(el, k, v);\n                    keyMap.delete(k);\n                });\n            }\n            keyMap.forEach(k => {\n                valueMap = this.getActivatedValues(bpMap, k);\n                if (valueMap) {\n                    const value = valueMap.get(k);\n                    this.updateElement(el, k, value);\n                }\n                else {\n                    this.clearElement(el, k);\n                }\n            });\n        });\n    }\n    /**\n     * clear the styles for a given element\n     * @param element\n     * @param key\n     */\n    clearElement(element, key) {\n        const builders = this.clearMap.get(element);\n        if (builders) {\n            const clearFn = builders.get(key);\n            if (!!clearFn) {\n                clearFn();\n                this.subject.next({ element, key, value: '' });\n            }\n        }\n    }\n    /**\n     * update a given element with the activated values for a given key\n     * @param element\n     * @param key\n     * @param value\n     */\n    updateElement(element, key, value) {\n        const builders = this.updateMap.get(element);\n        if (builders) {\n            const updateFn = builders.get(key);\n            if (!!updateFn) {\n                updateFn(value);\n                this.subject.next({ element, key, value });\n            }\n        }\n    }\n    /**\n     * release all references to a given element\n     * @param element\n     */\n    releaseElement(element) {\n        const watcherMap = this.watcherMap.get(element);\n        if (watcherMap) {\n            watcherMap.forEach(s => s.unsubscribe());\n            this.watcherMap.delete(element);\n        }\n        const elementMap = this.elementMap.get(element);\n        if (elementMap) {\n            elementMap.forEach((_, s) => elementMap.delete(s));\n            this.elementMap.delete(element);\n        }\n    }\n    /**\n     * trigger an update for a given element and key (e.g. layout)\n     * @param element\n     * @param key\n     */\n    triggerUpdate(element, key) {\n        const bpMap = this.elementMap.get(element);\n        if (bpMap) {\n            const valueMap = this.getActivatedValues(bpMap, key);\n            if (valueMap) {\n                if (key) {\n                    this.updateElement(element, key, valueMap.get(key));\n                }\n                else {\n                    valueMap.forEach((v, k) => this.updateElement(element, k, v));\n                }\n            }\n        }\n    }\n    /** Cross-reference for HTMLElement with directive key */\n    buildElementKeyMap(element, key) {\n        let keyMap = this.elementKeyMap.get(element);\n        if (!keyMap) {\n            keyMap = new Set();\n            this.elementKeyMap.set(element, keyMap);\n        }\n        keyMap.add(key);\n    }\n    /**\n     * Other triggers that should force style updates:\n     * - directionality\n     * - layout changes\n     * - mutationobserver updates\n     */\n    watchExtraTriggers(element, key, triggers) {\n        if (triggers && triggers.length) {\n            let watchers = this.watcherMap.get(element);\n            if (!watchers) {\n                watchers = new Map();\n                this.watcherMap.set(element, watchers);\n            }\n            const subscription = watchers.get(key);\n            if (!subscription) {\n                const newSubscription = merge(...triggers).subscribe(() => {\n                    const currentValue = this.getValue(element, key);\n                    this.updateElement(element, key, currentValue);\n                });\n                watchers.set(key, newSubscription);\n            }\n        }\n    }\n    /** Breakpoint locator by mediaQuery */\n    findByQuery(query) {\n        return this.breakpoints.findByQuery(query);\n    }\n    /**\n     * get the fallback breakpoint for a given element, starting with the current breakpoint\n     * @param bpMap\n     * @param key\n     */\n    getActivatedValues(bpMap, key) {\n        for (let i = 0; i < this.activatedBreakpoints.length; i++) {\n            const activatedBp = this.activatedBreakpoints[i];\n            const valueMap = bpMap.get(activatedBp.alias);\n            if (valueMap) {\n                if (key === undefined || (valueMap.has(key) && valueMap.get(key) != null)) {\n                    return valueMap;\n                }\n            }\n        }\n        // On the server, we explicitly have an \"all\" section filled in to begin with.\n        // So we don't need to aggressively find a fallback if no explicit value exists.\n        if (!this._useFallbacks) {\n            return undefined;\n        }\n        const lastHope = bpMap.get('');\n        return (key === undefined || lastHope && lastHope.has(key)) ? lastHope : undefined;\n    }\n    /**\n     * Watch for mediaQuery breakpoint activations\n     */\n    observeActivations() {\n        const queries = this.breakpoints.items.map(bp => bp.mediaQuery);\n        this.hook.registerBeforeAfterPrintHooks(this);\n        this.matchMedia\n            .observe(this.hook.withPrintQuery(queries))\n            .pipe(tap(this.hook.interceptEvents(this)), filter(this.hook.blockPropagation()))\n            .subscribe(this.onMediaChange.bind(this));\n    }\n}\nMediaMarshaller.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: MediaMarshaller, deps: [{ token: MatchMedia }, { token: BreakPointRegistry }, { token: PrintHook }], target: i0.ɵɵFactoryTarget.Injectable });\nMediaMarshaller.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: MediaMarshaller, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: MediaMarshaller, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: MatchMedia }, { type: BreakPointRegistry }, { type: PrintHook }]; } });\nfunction initBuilderMap(map, element, key, input) {\n    if (input !== undefined) {\n        const oldMap = map.get(element) ?? new Map();\n        oldMap.set(key, input);\n        map.set(element, oldMap);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass BaseDirective2 {\n    constructor(elementRef, styleBuilder, styler, marshal) {\n        this.elementRef = elementRef;\n        this.styleBuilder = styleBuilder;\n        this.styler = styler;\n        this.marshal = marshal;\n        this.DIRECTIVE_KEY = '';\n        this.inputs = [];\n        /** The most recently used styles for the builder */\n        this.mru = {};\n        this.destroySubject = new Subject();\n        /** Cache map for style computation */\n        this.styleCache = new Map();\n    }\n    /** Access to host element's parent DOM node */\n    get parentElement() {\n        return this.elementRef.nativeElement.parentElement;\n    }\n    /** Access to the HTMLElement for the directive */\n    get nativeElement() {\n        return this.elementRef.nativeElement;\n    }\n    /** Access to the activated value for the directive */\n    get activatedValue() {\n        return this.marshal.getValue(this.nativeElement, this.DIRECTIVE_KEY);\n    }\n    set activatedValue(value) {\n        this.marshal.setValue(this.nativeElement, this.DIRECTIVE_KEY, value, this.marshal.activatedAlias);\n    }\n    /** For @Input changes */\n    ngOnChanges(changes) {\n        Object.keys(changes).forEach(key => {\n            if (this.inputs.indexOf(key) !== -1) {\n                const bp = key.split('.').slice(1).join('.');\n                const val = changes[key].currentValue;\n                this.setValue(val, bp);\n            }\n        });\n    }\n    ngOnDestroy() {\n        this.destroySubject.next();\n        this.destroySubject.complete();\n        this.marshal.releaseElement(this.nativeElement);\n    }\n    /** Register with central marshaller service */\n    init(extraTriggers = []) {\n        this.marshal.init(this.elementRef.nativeElement, this.DIRECTIVE_KEY, this.updateWithValue.bind(this), this.clearStyles.bind(this), extraTriggers);\n    }\n    /** Add styles to the element using predefined style builder */\n    addStyles(input, parent) {\n        const builder = this.styleBuilder;\n        const useCache = builder.shouldCache;\n        let genStyles = this.styleCache.get(input);\n        if (!genStyles || !useCache) {\n            genStyles = builder.buildStyles(input, parent);\n            if (useCache) {\n                this.styleCache.set(input, genStyles);\n            }\n        }\n        this.mru = { ...genStyles };\n        this.applyStyleToElement(genStyles);\n        builder.sideEffect(input, genStyles, parent);\n    }\n    /** Remove generated styles from an element using predefined style builder */\n    clearStyles() {\n        Object.keys(this.mru).forEach(k => {\n            this.mru[k] = '';\n        });\n        this.applyStyleToElement(this.mru);\n        this.mru = {};\n        this.currentValue = undefined;\n    }\n    /** Force trigger style updates on DOM element */\n    triggerUpdate() {\n        this.marshal.triggerUpdate(this.nativeElement, this.DIRECTIVE_KEY);\n    }\n    /**\n     * Determine the DOM element's Flexbox flow (flex-direction).\n     *\n     * Check inline style first then check computed (stylesheet) style.\n     * And optionally add the flow value to element's inline style.\n     */\n    getFlexFlowDirection(target, addIfMissing = false) {\n        if (target) {\n            const [value, hasInlineValue] = this.styler.getFlowDirection(target);\n            if (!hasInlineValue && addIfMissing) {\n                const style = buildLayoutCSS(value);\n                const elements = [target];\n                this.styler.applyStyleToElements(style, elements);\n            }\n            return value.trim();\n        }\n        return 'row';\n    }\n    hasWrap(target) {\n        return this.styler.hasWrap(target);\n    }\n    /** Applies styles given via string pair or object map to the directive element */\n    applyStyleToElement(style, value, element = this.nativeElement) {\n        this.styler.applyStyleToElement(element, style, value);\n    }\n    setValue(val, bp) {\n        this.marshal.setValue(this.nativeElement, this.DIRECTIVE_KEY, val, bp);\n    }\n    updateWithValue(input) {\n        if (this.currentValue !== input) {\n            this.addStyles(input);\n            this.currentValue = input;\n        }\n    }\n}\nBaseDirective2.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: BaseDirective2, deps: [{ token: i0.ElementRef }, { token: StyleBuilder }, { token: StyleUtils }, { token: MediaMarshaller }], target: i0.ɵɵFactoryTarget.Directive });\nBaseDirective2.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.0.2\", type: BaseDirective2, usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: BaseDirective2, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: StyleBuilder }, { type: StyleUtils }, { type: MediaMarshaller }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * MockMatchMedia mocks calls to the Window API matchMedia with a build of a simulated\n * MockMediaQueryListener. Methods are available to simulate an activation of a mediaQuery\n * range and to clearAll mediaQuery listeners.\n */\nclass MockMatchMedia extends MatchMedia {\n    constructor(_zone, _platformId, _document, _breakpoints) {\n        super(_zone, _platformId, _document);\n        this._breakpoints = _breakpoints;\n        this.autoRegisterQueries = true; // Used for testing BreakPoint registrations\n        this.useOverlaps = false; // Allow fallback to overlapping mediaQueries\n    }\n    /** Easy method to clear all listeners for all mediaQueries */\n    clearAll() {\n        this.registry.forEach((mql) => {\n            mql.destroy();\n        });\n        this.registry.clear();\n        this.useOverlaps = false;\n    }\n    /** Feature to support manual, simulated activation of a mediaQuery. */\n    activate(mediaQuery, useOverlaps = this.useOverlaps) {\n        mediaQuery = this._validateQuery(mediaQuery);\n        if (useOverlaps || !this.isActive(mediaQuery)) {\n            this._deactivateAll();\n            this._registerMediaQuery(mediaQuery);\n            this._activateWithOverlaps(mediaQuery, useOverlaps);\n        }\n        return this.hasActivated;\n    }\n    /** Converts an optional mediaQuery alias to a specific, valid mediaQuery */\n    _validateQuery(queryOrAlias) {\n        const bp = this._breakpoints.findByAlias(queryOrAlias);\n        return bp?.mediaQuery ?? queryOrAlias;\n    }\n    /**\n     * Manually onMediaChange any overlapping mediaQueries to simulate\n     * similar functionality in the window.matchMedia()\n     */\n    _activateWithOverlaps(mediaQuery, useOverlaps) {\n        if (useOverlaps) {\n            const bp = this._breakpoints.findByQuery(mediaQuery);\n            const alias = bp?.alias ?? 'unknown';\n            // Simulate activation of overlapping lt-<XXX> ranges\n            switch (alias) {\n                case 'lg':\n                    this._activateByAlias(['lt-xl']);\n                    break;\n                case 'md':\n                    this._activateByAlias(['lt-xl', 'lt-lg']);\n                    break;\n                case 'sm':\n                    this._activateByAlias(['lt-xl', 'lt-lg', 'lt-md']);\n                    break;\n                case 'xs':\n                    this._activateByAlias(['lt-xl', 'lt-lg', 'lt-md', 'lt-sm']);\n                    break;\n            }\n            // Simulate activation of overlapping gt-<xxxx> mediaQuery ranges\n            switch (alias) {\n                case 'xl':\n                    this._activateByAlias(['gt-lg', 'gt-md', 'gt-sm', 'gt-xs']);\n                    break;\n                case 'lg':\n                    this._activateByAlias(['gt-md', 'gt-sm', 'gt-xs']);\n                    break;\n                case 'md':\n                    this._activateByAlias(['gt-sm', 'gt-xs']);\n                    break;\n                case 'sm':\n                    this._activateByAlias(['gt-xs']);\n                    break;\n            }\n        }\n        // Activate last since the responsiveActivation is watching *this* mediaQuery\n        return this._activateByQuery(mediaQuery);\n    }\n    /**\n     *\n     */\n    _activateByAlias(aliases) {\n        const activate = (alias) => {\n            const bp = this._breakpoints.findByAlias(alias);\n            this._activateByQuery(bp?.mediaQuery ?? alias);\n        };\n        aliases.forEach(activate);\n    }\n    /**\n     *\n     */\n    _activateByQuery(mediaQuery) {\n        if (!this.registry.has(mediaQuery) && this.autoRegisterQueries) {\n            this._registerMediaQuery(mediaQuery);\n        }\n        const mql = this.registry.get(mediaQuery);\n        if (mql && !this.isActive(mediaQuery)) {\n            this.registry.set(mediaQuery, mql.activate());\n        }\n        return this.hasActivated;\n    }\n    /** Deactivate all current MQLs and reset the buffer */\n    _deactivateAll() {\n        this.registry.forEach((it) => {\n            it.deactivate();\n        });\n        return this;\n    }\n    /** Insure the mediaQuery is registered with MatchMedia */\n    _registerMediaQuery(mediaQuery) {\n        if (!this.registry.has(mediaQuery) && this.autoRegisterQueries) {\n            this.registerQuery(mediaQuery);\n        }\n    }\n    /**\n     * Call window.matchMedia() to build a MediaQueryList; which\n     * supports 0..n listeners for activation/deactivation\n     */\n    buildMQL(query) {\n        return new MockMediaQueryList(query);\n    }\n    get hasActivated() {\n        return this.activations.length > 0;\n    }\n}\nMockMatchMedia.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: MockMatchMedia, deps: [{ token: i0.NgZone }, { token: PLATFORM_ID }, { token: DOCUMENT }, { token: BreakPointRegistry }], target: i0.ɵɵFactoryTarget.Injectable });\nMockMatchMedia.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: MockMatchMedia });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: MockMatchMedia, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: Object, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: BreakPointRegistry }]; } });\n/**\n * Special internal class to simulate a MediaQueryList and\n * - supports manual activation to simulate mediaQuery matching\n * - manages listeners\n */\nclass MockMediaQueryList extends EventTarget {\n    constructor(_mediaQuery) {\n        super();\n        this._mediaQuery = _mediaQuery;\n        this._isActive = false;\n        this._listeners = [];\n        this.onchange = null;\n    }\n    get matches() {\n        return this._isActive;\n    }\n    get media() {\n        return this._mediaQuery;\n    }\n    /**\n     * Destroy the current list by deactivating the\n     * listeners and clearing the internal list\n     */\n    destroy() {\n        this.deactivate();\n        this._listeners = [];\n    }\n    /** Notify all listeners that 'matches === TRUE' */\n    activate() {\n        if (!this._isActive) {\n            this._isActive = true;\n            this._listeners.forEach((callback) => {\n                const cb = callback;\n                cb.call(this, { matches: this.matches, media: this.media });\n            });\n        }\n        return this;\n    }\n    /** Notify all listeners that 'matches === false' */\n    deactivate() {\n        if (this._isActive) {\n            this._isActive = false;\n            this._listeners.forEach((callback) => {\n                const cb = callback;\n                cb.call(this, { matches: this.matches, media: this.media });\n            });\n        }\n        return this;\n    }\n    /** Add a listener to our internal list to activate later */\n    addListener(listener) {\n        if (this._listeners.indexOf(listener) === -1) {\n            this._listeners.push(listener);\n        }\n        if (this._isActive) {\n            const cb = listener;\n            cb.call(this, { matches: this.matches, media: this.media });\n        }\n    }\n    /** Don't need to remove listeners in the testing environment */\n    removeListener(_) {\n    }\n    dispatchEvent(_) {\n        return false;\n    }\n}\n/**\n * Pre-configured provider for MockMatchMedia\n */\nconst MockMatchMediaProvider = {\n    provide: MatchMedia,\n    useClass: MockMatchMedia\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Wraps the provided value in an array, unless the provided value is an array. */\nfunction coerceArray(value) {\n    return Array.isArray(value) ? value : [value];\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * MediaObserver enables applications to listen for 1..n mediaQuery activations and to determine\n * if a mediaQuery is currently activated.\n *\n * Since a breakpoint change will first deactivate 1...n mediaQueries and then possibly activate\n * 1..n mediaQueries, the MediaObserver will debounce notifications and report ALL *activations*\n * in 1 event notification. The reported activations will be sorted in descending priority order.\n *\n * This class uses the BreakPoint Registry to inject alias information into the raw MediaChange\n * notification. For custom mediaQuery notifications, alias information will not be injected and\n * those fields will be ''.\n *\n * Note: Developers should note that only mediaChange activations (not de-activations)\n *       are announced by the MediaObserver.\n *\n *  @usage\n *\n *  // RxJS\n *  import { filter } from 'rxjs/operators';\n *  import { MediaObserver } from '@angular/flex-layout';\n *\n *  @Component({ ... })\n *  export class AppComponent {\n *    status: string = '';\n *\n *    constructor(mediaObserver: MediaObserver) {\n *      const media$ = mediaObserver.asObservable().pipe(\n *        filter((changes: MediaChange[]) => true)   // silly noop filter\n *      );\n *\n *      media$.subscribe((changes: MediaChange[]) => {\n *        let status = '';\n *        changes.forEach( change => {\n *          status += `'${change.mqAlias}' = (${change.mediaQuery}) <br/>` ;\n *        });\n *        this.status = status;\n *     });\n *\n *    }\n *  }\n */\nclass MediaObserver {\n    constructor(breakpoints, matchMedia, hook) {\n        this.breakpoints = breakpoints;\n        this.matchMedia = matchMedia;\n        this.hook = hook;\n        /** Filter MediaChange notifications for overlapping breakpoints */\n        this.filterOverlaps = false;\n        this.destroyed$ = new Subject();\n        this._media$ = this.watchActivations();\n    }\n    /**\n     * Completes the active subject, signalling to all complete for all\n     * MediaObserver subscribers\n     */\n    ngOnDestroy() {\n        this.destroyed$.next();\n        this.destroyed$.complete();\n    }\n    // ************************************************\n    // Public Methods\n    // ************************************************\n    /**\n     * Observe changes to current activation 'list'\n     */\n    asObservable() {\n        return this._media$;\n    }\n    /**\n     * Allow programmatic query to determine if one or more media query/alias match\n     * the current viewport size.\n     * @param value One or more media queries (or aliases) to check.\n     * @returns Whether any of the media queries match.\n     */\n    isActive(value) {\n        const aliases = splitQueries(coerceArray(value));\n        return aliases.some(alias => {\n            const query = toMediaQuery(alias, this.breakpoints);\n            return query !== null && this.matchMedia.isActive(query);\n        });\n    }\n    // ************************************************\n    // Internal Methods\n    // ************************************************\n    /**\n     * Register all the mediaQueries registered in the BreakPointRegistry\n     * This is needed so subscribers can be auto-notified of all standard, registered\n     * mediaQuery activations\n     */\n    watchActivations() {\n        const queries = this.breakpoints.items.map(bp => bp.mediaQuery);\n        return this.buildObservable(queries);\n    }\n    /**\n     * Only pass/announce activations (not de-activations)\n     *\n     * Since multiple-mediaQueries can be activation in a cycle,\n     * gather all current activations into a single list of changes to observers\n     *\n     * Inject associated (if any) alias information into the MediaChange event\n     * - Exclude mediaQuery activations for overlapping mQs. List bounded mQ ranges only\n     * - Exclude print activations that do not have an associated mediaQuery\n     *\n     * NOTE: the raw MediaChange events [from MatchMedia] do not\n     *       contain important alias information; as such this info\n     *       must be injected into the MediaChange\n     */\n    buildObservable(mqList) {\n        const hasChanges = (changes) => {\n            const isValidQuery = (change) => (change.mediaQuery.length > 0);\n            return (changes.filter(isValidQuery).length > 0);\n        };\n        const excludeOverlaps = (changes) => {\n            return !this.filterOverlaps ? changes : changes.filter(change => {\n                const bp = this.breakpoints.findByQuery(change.mediaQuery);\n                return bp?.overlapping ?? true;\n            });\n        };\n        const ignoreDuplicates = (previous, current) => {\n            if (previous.length !== current.length) {\n                return false;\n            }\n            const previousMqs = previous.map(mc => mc.mediaQuery);\n            const currentMqs = new Set(current.map(mc => mc.mediaQuery));\n            const difference = new Set(previousMqs.filter(mq => !currentMqs.has(mq)));\n            return difference.size === 0;\n        };\n        /**\n         */\n        return this.matchMedia\n            .observe(this.hook.withPrintQuery(mqList))\n            .pipe(filter((change) => change.matches), debounceTime(0, asapScheduler), switchMap(_ => of(this.findAllActivations())), map(excludeOverlaps), filter(hasChanges), distinctUntilChanged(ignoreDuplicates), takeUntil(this.destroyed$));\n    }\n    /**\n     * Find all current activations and prepare single list of activations\n     * sorted by descending priority.\n     */\n    findAllActivations() {\n        const mergeMQAlias = (change) => {\n            const bp = this.breakpoints.findByQuery(change.mediaQuery);\n            return mergeAlias(change, bp);\n        };\n        const replaceWithPrintAlias = (change) => this.hook.isPrintEvent(change) ? this.hook.updateEvent(change) : change;\n        return this.matchMedia\n            .activations\n            .map(query => new MediaChange(true, query))\n            .map(replaceWithPrintAlias)\n            .map(mergeMQAlias)\n            .sort(sortDescendingPriority);\n    }\n}\nMediaObserver.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: MediaObserver, deps: [{ token: BreakPointRegistry }, { token: MatchMedia }, { token: PrintHook }], target: i0.ɵɵFactoryTarget.Injectable });\nMediaObserver.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: MediaObserver, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: MediaObserver, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: BreakPointRegistry }, { type: MatchMedia }, { type: PrintHook }]; } });\n/**\n * Find associated breakpoint (if any)\n */\nfunction toMediaQuery(query, locator) {\n    const bp = locator.findByAlias(query) ?? locator.findByQuery(query);\n    return bp?.mediaQuery ?? null;\n}\n/**\n * Split each query string into separate query strings if two queries are provided as comma\n * separated.\n */\nfunction splitQueries(queries) {\n    return queries.flatMap(query => query.split(','))\n        .map(query => query.trim());\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Class\n */\nclass MediaTrigger {\n    constructor(breakpoints, matchMedia, layoutConfig, _platformId, _document) {\n        this.breakpoints = breakpoints;\n        this.matchMedia = matchMedia;\n        this.layoutConfig = layoutConfig;\n        this._platformId = _platformId;\n        this._document = _document;\n        this.hasCachedRegistryMatches = false;\n        this.originalActivations = [];\n        this.originalRegistry = new Map();\n    }\n    /**\n     * Manually activate range of breakpoints\n     * @param list array of mediaQuery or alias strings\n     */\n    activate(list) {\n        list = list.map(it => it.trim()); // trim queries\n        this.saveActivations();\n        this.deactivateAll();\n        this.setActivations(list);\n        this.prepareAutoRestore();\n    }\n    /**\n     * Restore original, 'real' breakpoints and emit events\n     * to trigger stream notification\n     */\n    restore() {\n        if (this.hasCachedRegistryMatches) {\n            const extractQuery = (change) => change.mediaQuery;\n            const list = this.originalActivations.map(extractQuery);\n            try {\n                this.deactivateAll();\n                this.restoreRegistryMatches();\n                this.setActivations(list);\n            }\n            finally {\n                this.originalActivations = [];\n                if (this.resizeSubscription) {\n                    this.resizeSubscription.unsubscribe();\n                }\n            }\n        }\n    }\n    // ************************************************\n    // Internal Methods\n    // ************************************************\n    /**\n     * Whenever window resizes, immediately auto-restore original\n     * activations (if we are simulating activations)\n     */\n    prepareAutoRestore() {\n        const isBrowser = isPlatformBrowser(this._platformId) && this._document;\n        const enableAutoRestore = isBrowser && this.layoutConfig.mediaTriggerAutoRestore;\n        if (enableAutoRestore) {\n            const resize$ = fromEvent(window, 'resize').pipe(take(1));\n            this.resizeSubscription = resize$.subscribe(this.restore.bind(this));\n        }\n    }\n    /**\n     * Notify all matchMedia subscribers of de-activations\n     *\n     * Note: we must force 'matches' updates for\n     *       future matchMedia::activation lookups\n     */\n    deactivateAll() {\n        const list = this.currentActivations;\n        this.forceRegistryMatches(list, false);\n        this.simulateMediaChanges(list, false);\n    }\n    /**\n     * Cache current activations as sorted, prioritized list of MediaChanges\n     */\n    saveActivations() {\n        if (!this.hasCachedRegistryMatches) {\n            const toMediaChange = (query) => new MediaChange(true, query);\n            const mergeMQAlias = (change) => {\n                const bp = this.breakpoints.findByQuery(change.mediaQuery);\n                return mergeAlias(change, bp);\n            };\n            this.originalActivations = this.currentActivations\n                .map(toMediaChange)\n                .map(mergeMQAlias)\n                .sort(sortDescendingPriority);\n            this.cacheRegistryMatches();\n        }\n    }\n    /**\n     * Force set manual activations for specified mediaQuery list\n     */\n    setActivations(list) {\n        if (!!this.originalRegistry) {\n            this.forceRegistryMatches(list, true);\n        }\n        this.simulateMediaChanges(list);\n    }\n    /**\n     * For specified mediaQuery list manually simulate activations or deactivations\n     */\n    simulateMediaChanges(queries, matches = true) {\n        const toMediaQuery = (query) => {\n            const locator = this.breakpoints;\n            const bp = locator.findByAlias(query) || locator.findByQuery(query);\n            return bp ? bp.mediaQuery : query;\n        };\n        const emitChangeEvent = (query) => this.emitChangeEvent(matches, query);\n        queries.map(toMediaQuery).forEach(emitChangeEvent);\n    }\n    /**\n     * Replace current registry with simulated registry...\n     * Note: this is required since MediaQueryList::matches is 'readOnly'\n     */\n    forceRegistryMatches(queries, matches) {\n        const registry = new Map();\n        queries.forEach(query => {\n            registry.set(query, { matches });\n        });\n        this.matchMedia.registry = registry;\n    }\n    /**\n     * Save current MatchMedia::registry items.\n     */\n    cacheRegistryMatches() {\n        const target = this.originalRegistry;\n        target.clear();\n        this.matchMedia.registry.forEach((value, key) => {\n            target.set(key, value);\n        });\n        this.hasCachedRegistryMatches = true;\n    }\n    /**\n     * Restore original, 'true' registry\n     */\n    restoreRegistryMatches() {\n        const target = this.matchMedia.registry;\n        target.clear();\n        this.originalRegistry.forEach((value, key) => {\n            target.set(key, value);\n        });\n        this.originalRegistry.clear();\n        this.hasCachedRegistryMatches = false;\n    }\n    /**\n     * Manually emit a MediaChange event via the MatchMedia to MediaMarshaller and MediaObserver\n     */\n    emitChangeEvent(matches, query) {\n        this.matchMedia.source.next(new MediaChange(matches, query));\n    }\n    get currentActivations() {\n        return this.matchMedia.activations;\n    }\n}\nMediaTrigger.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: MediaTrigger, deps: [{ token: BreakPointRegistry }, { token: MatchMedia }, { token: LAYOUT_CONFIG }, { token: PLATFORM_ID }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });\nMediaTrigger.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: MediaTrigger, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: MediaTrigger, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: BreakPointRegistry }, { type: MatchMedia }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [LAYOUT_CONFIG]\n                }] }, { type: Object, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n* The flex API permits 3 or 1 parts of the value:\n*    - `flex-grow flex-shrink flex-basis`, or\n*    - `flex-basis`\n*/\nfunction validateBasis(basis, grow = '1', shrink = '1') {\n    let parts = [grow, shrink, basis];\n    let j = basis.indexOf('calc');\n    if (j > 0) {\n        parts[2] = _validateCalcValue(basis.substring(j).trim());\n        let matches = basis.substr(0, j).trim().split(' ');\n        if (matches.length == 2) {\n            parts[0] = matches[0];\n            parts[1] = matches[1];\n        }\n    }\n    else if (j == 0) {\n        parts[2] = _validateCalcValue(basis.trim());\n    }\n    else {\n        let matches = basis.split(' ');\n        parts = (matches.length === 3) ? matches : [\n            grow, shrink, basis\n        ];\n    }\n    return parts;\n}\n/**\n * Calc expressions require whitespace before & after any expression operators\n * This is a simple, crude whitespace padding solution.\n *   - '3 3 calc(15em + 20px)'\n *   - calc(100% / 7 * 2)\n *   - 'calc(15em + 20px)'\n *   - 'calc(15em+20px)'\n *   - '37px'\n *   = '43%'\n */\nfunction _validateCalcValue(calc) {\n    return calc.replace(/[\\s]/g, '').replace(/[\\/\\*\\+\\-]/g, ' $& ');\n}\n\nconst MULTIPLIER_SUFFIX = 'x';\nfunction multiply(value, multiplier) {\n    if (multiplier === undefined) {\n        return value;\n    }\n    const transformValue = (possibleValue) => {\n        const numberValue = +(possibleValue.slice(0, -MULTIPLIER_SUFFIX.length));\n        if (value.endsWith(MULTIPLIER_SUFFIX) && !isNaN(numberValue)) {\n            return `${numberValue * multiplier.value}${multiplier.unit}`;\n        }\n        return value;\n    };\n    return value.includes(' ') ?\n        value.split(' ').map(transformValue).join(' ') : transformValue(value);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BREAKPOINT, BREAKPOINTS, BREAKPOINT_PRINT, BROWSER_PROVIDER, BaseDirective2, BreakPointRegistry, CLASS_NAME, CoreModule, DEFAULT_BREAKPOINTS, DEFAULT_CONFIG, LAYOUT_CONFIG, MediaChange, MediaMarshaller, MediaObserver, MediaTrigger, ORIENTATION_BREAKPOINTS, PrintHook, SERVER_TOKEN, ScreenTypes, StyleBuilder, StyleUtils, StylesheetMap, coerceArray, mergeAlias, removeStyles, sortAscendingPriority, sortDescendingPriority, validateBasis, MatchMedia as ɵMatchMedia, MockMatchMedia as ɵMockMatchMedia, MockMatchMediaProvider as ɵMockMatchMediaProvider, multiply as ɵmultiply };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}