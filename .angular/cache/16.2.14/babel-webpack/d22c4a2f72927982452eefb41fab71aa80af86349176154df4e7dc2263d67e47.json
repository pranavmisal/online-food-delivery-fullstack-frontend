{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../auth.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"src/app/services/notification.service\";\nimport * as i5 from \"@angular/material/form-field\";\nimport * as i6 from \"@angular/material/input\";\nexport class LoginComponent {\n  constructor(formBuilder, authService, router, notificationService) {\n    this.formBuilder = formBuilder;\n    this.authService = authService;\n    this.router = router;\n    this.notificationService = notificationService;\n    this.loading = false;\n  }\n  ngOnInit() {\n    this.loginForm = this.formBuilder.group({\n      identifier: ['', Validators.required],\n      password: ['', Validators.required]\n    });\n  }\n  onSubmit() {\n    if (this.loginForm.invalid) {\n      return;\n    }\n    this.loading = true;\n    this.authService.login(this.loginForm.value).subscribe(response => {\n      this.notificationService.showSuccess('Login successful');\n      console.log('Login successful', response);\n      this.router.navigate(['/home']);\n    }, error => {\n      if (error.message === 'User is already logged in.') {\n        this.notificationService.showError('You are already logged in. Please log out first.');\n      } else {\n        this.notificationService.showError('Login failed: ' + error.error.message);\n      }\n      console.error('Login failed', error);\n      this.loading = false;\n    });\n  }\n  static #_ = this.ɵfac = function LoginComponent_Factory(t) {\n    return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.AuthService), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i4.NotificationService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: LoginComponent,\n    selectors: [[\"app-login\"]],\n    decls: 13,\n    vars: 2,\n    consts: [[1, \"login-form\", 3, \"formGroup\", \"ngSubmit\"], [\"appearance\", \"fill\"], [\"matInput\", \"\", \"formControlName\", \"identifier\", \"type\", \"email\", \"required\", \"\"], [\"matInput\", \"\", \"formControlName\", \"password\", \"type\", \"password\", \"required\", \"\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", \"type\", \"submit\", 3, \"disabled\"]],\n    template: function LoginComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"h1\");\n        i0.ɵɵtext(1, \"Login\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"form\", 0);\n        i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_Template_form_ngSubmit_2_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵelementStart(3, \"mat-form-field\", 1)(4, \"mat-label\");\n        i0.ɵɵtext(5, \"Email, Username or Mobile\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(6, \"input\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"mat-form-field\", 1)(8, \"mat-label\");\n        i0.ɵɵtext(9, \"Password\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(10, \"input\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"button\", 4);\n        i0.ɵɵtext(12, \"Login\");\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"formGroup\", ctx.loginForm);\n        i0.ɵɵadvance(9);\n        i0.ɵɵproperty(\"disabled\", ctx.loading || ctx.loginForm.invalid);\n      }\n    },\n    dependencies: [i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.RequiredValidator, i5.MatFormField, i5.MatLabel, i6.MatInput, i1.FormGroupDirective, i1.FormControlName],\n    styles: [\".login-form[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-direction: column;\\n  width: 50%;\\n  margin: auto;\\n  padding: 10px;\\n  border-radius: 10px;\\n  box-shadow: 0px 1px 10px lightgray;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvYXV0aC9sb2dpbi9sb2dpbi5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLGFBQUE7RUFDQSxzQkFBQTtFQUNBLFVBQUE7RUFDQSxZQUFBO0VBQ0EsYUFBQTtFQUNBLG1CQUFBO0VBQ0Esa0NBQUE7QUFDSiIsInNvdXJjZXNDb250ZW50IjpbIi5sb2dpbi1mb3Jte1xyXG4gICAgZGlzcGxheTogZmxleDtcclxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbiAgICB3aWR0aDogNTAlO1xyXG4gICAgbWFyZ2luOiBhdXRvO1xyXG4gICAgcGFkZGluZzogMTBweDtcclxuICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7XHJcbiAgICBib3gtc2hhZG93OiAwcHggMXB4IDEwcHggbGlnaHRncmF5O1xyXG59Il0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["Validators","LoginComponent","constructor","formBuilder","authService","router","notificationService","loading","ngOnInit","loginForm","group","identifier","required","password","onSubmit","invalid","login","value","subscribe","response","showSuccess","console","log","navigate","error","message","showError","_","i0","ɵɵdirectiveInject","i1","FormBuilder","i2","AuthService","i3","Router","i4","NotificationService","_2","selectors","decls","vars","consts","template","LoginComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵlistener","LoginComponent_Template_form_ngSubmit_2_listener","ɵɵelement","ɵɵadvance","ɵɵproperty"],"sources":["C:\\Users\\VI_Pranav\\Desktop\\food-delivery-app\\src\\app\\auth\\login\\login.component.ts","C:\\Users\\VI_Pranav\\Desktop\\food-delivery-app\\src\\app\\auth\\login\\login.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AuthService } from '../auth.service';\nimport { Router } from '@angular/router';\nimport { NotificationService } from 'src/app/services/notification.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n  loginForm!: FormGroup;\n  loading = false;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    public authService: AuthService, \n    public router: Router,\n    public notificationService: NotificationService\n  ){}\n\n  ngOnInit() {\n    this.loginForm = this.formBuilder.group({\n      identifier: ['', Validators.required],\n      password: ['', Validators.required]\n    });\n  }\n\n  onSubmit() {\n    if (this.loginForm.invalid) {\n      return;\n    }\n\n    this.loading = true;\n    this.authService.login(this.loginForm.value).subscribe(\n      response => {\n        this.notificationService.showSuccess('Login successful');\n        console.log('Login successful', response);\n        this.router.navigate(['/home']);\n      },\n      error => {\n        if (error.message === 'User is already logged in.') {\n          this.notificationService.showError('You are already logged in. Please log out first.');\n        } else {\n          this.notificationService.showError('Login failed: ' + error.error.message);\n        }\n        console.error('Login failed', error);\n        this.loading = false;\n      }\n    );\n  }\n}\n","<h1>Login</h1>\n<form [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\" class=\"login-form\">\n  <mat-form-field appearance=\"fill\">\n    <mat-label>Email, Username or Mobile</mat-label>\n    <input matInput formControlName=\"identifier\" type=\"email\" required>\n  </mat-form-field>\n\n  <mat-form-field appearance=\"fill\">\n    <mat-label>Password</mat-label>\n    <input matInput formControlName=\"password\" type=\"password\" required>\n  </mat-form-field>\n\n  <button mat-raised-button color=\"primary\" type=\"submit\" [disabled]=\"loading || loginForm.invalid\">Login</button>\n</form>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}