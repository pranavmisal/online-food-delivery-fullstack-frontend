{"ast":null,"code":"import { BehaviorSubject, of, tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:3000/api/auth';\n    this.currentUserSubject = new BehaviorSubject(null);\n    this.currentUser$ = this.currentUserSubject.asObservable();\n    const storedUser = JSON.parse(localStorage.getItem('currentUser') || 'null');\n    if (storedUser) {\n      this.currentUserSubject.next(storedUser);\n    }\n  }\n  // for login\n  login(credentials) {\n    return this.http.post(`${this.apiUrl}/login`, credentials).pipe(tap(user => {\n      this.currentUserSubject.next(user);\n      localStorage.setItem('currentUser', JSON.stringify(user));\n    }));\n  }\n  // for signup\n  signup(user) {\n    return this.http.post(`${this.apiUrl}/signup`, user).pipe(tap(user => {\n      this.currentUserSubject.next(user);\n      localStorage.setItem('currentUser', JSON.stringify(user));\n    }));\n  }\n  // for logout\n  logout() {\n    this.currentUserSubject.next(null);\n    localStorage.removeItem('currentUser');\n    return of(null);\n  }\n  // for fetching order history\n  getOrderHistory() {\n    const currentUser = this.getCurrentUser();\n    if (currentUser) {\n      return this.http.get(`${this.apiUrl}/orders/${currentUser.id}`);\n    }\n    return of(null);\n  }\n  // fetch current user from API or local storage\n  getCurrentUser() {\n    return this.currentUserSubject.value;\n  }\n  // fetch addresses for the current user\n  getUserAddresses(userId) {\n    return this.http.get(`${this.apiUrl}/users/${userId}/addresses`);\n  }\n  // update the user profile\n  updateProfile(userId, userProfile) {\n    return this.http.put(`${this.apiUrl}/profile/${userId}`, userProfile).pipe(tap(updatedUser => {\n      this.currentUserSubject.next(updatedUser);\n      localStorage.setItem('currentUser', JSON.stringify(updatedUser));\n    }));\n  }\n  // for updating user address\n  updateAddress(userId, address) {\n    return this.http.put(`${this.apiUrl}/users/${userId}/addresses`, address).pipe(tap(updateAddress => {\n      // update the current users address\n      const currentUser = this.currentUserSubject.value;\n      currentUser.address = this.updateAddress;\n      this.currentUserSubject.next(currentUser);\n      localStorage.setItem('currentUSer', JSON.stringify(currentUser));\n    }));\n  }\n  // for updating the profile image\n  updateProfileImage(userId, image) {\n    return this.http.put(`${this.apiUrl}/profile/${userId}/image`, image).pipe(tap(updatedUser => {\n      this.currentUserSubject.next(updatedUser);\n      localStorage.setItem('currentUser', JSON.stringify(updatedUser));\n    }));\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["BehaviorSubject","of","tap","AuthService","constructor","http","apiUrl","currentUserSubject","currentUser$","asObservable","storedUser","JSON","parse","localStorage","getItem","next","login","credentials","post","pipe","user","setItem","stringify","signup","logout","removeItem","getOrderHistory","currentUser","getCurrentUser","get","id","value","getUserAddresses","userId","updateProfile","userProfile","put","updatedUser","updateAddress","address","updateProfileImage","image","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\VI_Pranav\\Desktop\\food-delivery-app\\src\\app\\auth\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { BehaviorSubject, Observable, of, tap } from 'rxjs';\r\nimport { Address } from '../models/user.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  public apiUrl = 'http://localhost:3000/api/auth';\r\n  public currentUserSubject = new BehaviorSubject<any>(null);\r\n  public currentUser$: Observable<any> = this.currentUserSubject.asObservable();\r\n  \r\n  constructor(public http: HttpClient) { \r\n    const storedUser = JSON.parse(localStorage.getItem('currentUser') || 'null');\r\n    if (storedUser) {\r\n      this.currentUserSubject.next(storedUser);\r\n    }\r\n   }\r\n\r\n  // for login\r\n  public login(credentials: any): Observable<any> {\r\n    return this.http.post(`${this.apiUrl}/login`, credentials).pipe(\r\n      tap(user => {\r\n        this.currentUserSubject.next(user);\r\n        localStorage.setItem('currentUser', JSON.stringify(user));\r\n      })\r\n    );\r\n  }\r\n\r\n  // for signup\r\n  public signup(user: any): Observable<any> {\r\n    return this.http.post(`${this.apiUrl}/signup`, user).pipe(\r\n      tap(user => {\r\n        this.currentUserSubject.next(user);\r\n        localStorage.setItem('currentUser', JSON.stringify(user));\r\n      })\r\n    );\r\n  }\r\n\r\n  // for logout\r\n  public logout(): Observable<any> {\r\n    this.currentUserSubject.next(null);\r\n    localStorage.removeItem('currentUser');\r\n    return of(null);\r\n  }\r\n\r\n  // for fetching order history\r\n  public getOrderHistory(): Observable<any>{\r\n    const currentUser = this.getCurrentUser();\r\n    if (currentUser) {\r\n      return this.http.get(`${this.apiUrl}/orders/${currentUser.id}`);\r\n    }\r\n    return of(null);\r\n  }\r\n  \r\n  // fetch current user from API or local storage\r\n  public getCurrentUser(): any {\r\n    return this.currentUserSubject.value;\r\n  }\r\n\r\n  // fetch addresses for the current user\r\n  public getUserAddresses(userId: number): Observable<Address[]>{\r\n    return this.http.get<Address[]>(`${this.apiUrl}/users/${userId}/addresses`);\r\n  }\r\n\r\n  // update the user profile\r\n  public updateProfile(userId: string, userProfile: any): Observable<any>{\r\n    return this.http.put(`${this.apiUrl}/profile/${userId}`, userProfile).pipe(\r\n      tap((updatedUser) => {\r\n        this.currentUserSubject.next(updatedUser);\r\n        localStorage.setItem('currentUser', JSON.stringify(updatedUser));\r\n      })\r\n    );\r\n  }\r\n\r\n  // for updating user address\r\n  public updateAddress(userId: string, address: Address): Observable<any>{\r\n    return this.http.put(`${this.apiUrl}/users/${userId}/addresses`, address).pipe(\r\n      tap((updateAddress) => {\r\n        // update the current users address\r\n        const currentUser = this.currentUserSubject.value;\r\n        currentUser.address = this.updateAddress;\r\n        this.currentUserSubject.next(currentUser);\r\n        localStorage.setItem('currentUSer', JSON.stringify(currentUser));\r\n      })\r\n    )\r\n  }\r\n\r\n  // for updating the profile image\r\n  public updateProfileImage(userId: string, image: any): Observable<any>{\r\n    return this.http.put(`${this.apiUrl}/profile/${userId}/image`, image).pipe(\r\n      tap((updatedUser) => {\r\n        this.currentUserSubject.next(updatedUser);\r\n        localStorage.setItem('currentUser', JSON.stringify(updatedUser));\r\n      })\r\n    );\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}