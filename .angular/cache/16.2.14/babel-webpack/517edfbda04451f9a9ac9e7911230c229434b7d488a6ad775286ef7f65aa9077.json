{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../auth/auth.service\";\nexport class CartService {\n  constructor(http, authService) {\n    this.http = http;\n    this.authService = authService;\n    this.cart = [];\n    this.itemAdded = new EventEmitter();\n    // public cartCleared = new Subject<void>();\n    this.cartCleared = new EventEmitter();\n  }\n  addToCart(menuItem, quantity = 1) {\n    const existingItem = this.cart.find(item => item.menuItem.id === menuItem.id);\n    if (existingItem) {\n      existingItem.quantity += quantity;\n    } else {\n      this.cart.push({\n        menuItem,\n        quantity\n      });\n    }\n    this.itemAdded.emit(menuItem);\n  }\n  getCartItems() {\n    return this.cart;\n  }\n  clearCart() {\n    this.cart = [];\n    this.cartCleared.emit();\n  }\n  getTotalItemCount() {\n    return this.cart.reduce((total, item) => total + item.quantity, 0);\n  }\n  getTotalPrice() {\n    return this.cart.reduce((total, item) => total + item.menuItem.price * item.quantity, 0);\n  }\n  placeOrder() {\n    const user = this.authService.getCurrentUser();\n    const orderDetails = this.cart.map(item => ({\n      menu_item_id: item.menuItem.id,\n      quantity: item.quantity,\n      total_price: item.menuItem.price * item.quantity\n    }));\n    const orderData = {\n      user_id: user.id,\n      orderItems: orderDetails,\n      total_price: this.getTotalPrice()\n    };\n    return this.http.post('/api/orders', orderData);\n  }\n  static #_ = this.ɵfac = function CartService_Factory(t) {\n    return new (t || CartService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CartService,\n    factory: CartService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["EventEmitter","CartService","constructor","http","authService","cart","itemAdded","cartCleared","addToCart","menuItem","quantity","existingItem","find","item","id","push","emit","getCartItems","clearCart","getTotalItemCount","reduce","total","getTotalPrice","price","placeOrder","user","getCurrentUser","orderDetails","map","menu_item_id","total_price","orderData","user_id","orderItems","post","_","i0","ɵɵinject","i1","HttpClient","i2","AuthService","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\VI_Pranav\\Desktop\\food-delivery-app\\src\\app\\services\\cart.service.ts"],"sourcesContent":["import { EventEmitter, Injectable } from '@angular/core';\nimport { Menu } from '../models/menu.model';\nimport { Subject } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { AuthService } from '../auth/auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CartService {\n  public cart: {menuItem: Menu, quantity: number}[] = [];\n  public itemAdded: EventEmitter<Menu> = new EventEmitter<Menu>();\n  // public cartCleared = new Subject<void>();\n  public cartCleared: EventEmitter<void> = new EventEmitter<void>();\n\n  constructor(public http: HttpClient, public authService: AuthService) { }\n\n  public addToCart(menuItem: Menu, quantity: number = 1){\n    const existingItem = this.cart.find(item => item.menuItem.id === menuItem.id);\n    if (existingItem){\n      existingItem.quantity += quantity;\n    } else {\n      this.cart.push({menuItem, quantity});\n    }\n    this.itemAdded.emit(menuItem);\n  }\n\n  public getCartItems(){\n    return this.cart;\n  }\n\n  public clearCart(){\n    this.cart = [];\n    this.cartCleared.emit();\n  }\n\n  public getTotalItemCount(): number {\n    return this.cart.reduce((total, item) => total + item.quantity, 0);\n  }\n\n  public getTotalPrice(): number{\n    return this.cart.reduce((total, item) => total + (item.menuItem.price * item.quantity), 0);\n  }\n\n  public placeOrder(){\n    const user = this.authService.getCurrentUser();\n    const orderDetails = this.cart.map(item => ({\n      menu_item_id: item.menuItem.id,\n      quantity: item.quantity,\n      total_price: item.menuItem.price * item.quantity\n    }));\n\n    const orderData = {\n      user_id: user.id,\n      orderItems: orderDetails,\n      total_price: this.getTotalPrice()\n    };\n    return this.http.post('/api/orders', orderData);\n  }\n}\n"],"mappings":"AAAA,SAASA,YAAY,QAAoB,eAAe;;;;AASxD,OAAM,MAAOC,WAAW;EAMtBC,YAAmBC,IAAgB,EAASC,WAAwB;IAAjD,KAAAD,IAAI,GAAJA,IAAI;IAAqB,KAAAC,WAAW,GAAXA,WAAW;IALhD,KAAAC,IAAI,GAAyC,EAAE;IAC/C,KAAAC,SAAS,GAAuB,IAAIN,YAAY,EAAQ;IAC/D;IACO,KAAAO,WAAW,GAAuB,IAAIP,YAAY,EAAQ;EAEO;EAEjEQ,SAASA,CAACC,QAAc,EAAEC,QAAA,GAAmB,CAAC;IACnD,MAAMC,YAAY,GAAG,IAAI,CAACN,IAAI,CAACO,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACJ,QAAQ,CAACK,EAAE,KAAKL,QAAQ,CAACK,EAAE,CAAC;IAC7E,IAAIH,YAAY,EAAC;MACfA,YAAY,CAACD,QAAQ,IAAIA,QAAQ;KAClC,MAAM;MACL,IAAI,CAACL,IAAI,CAACU,IAAI,CAAC;QAACN,QAAQ;QAAEC;MAAQ,CAAC,CAAC;;IAEtC,IAAI,CAACJ,SAAS,CAACU,IAAI,CAACP,QAAQ,CAAC;EAC/B;EAEOQ,YAAYA,CAAA;IACjB,OAAO,IAAI,CAACZ,IAAI;EAClB;EAEOa,SAASA,CAAA;IACd,IAAI,CAACb,IAAI,GAAG,EAAE;IACd,IAAI,CAACE,WAAW,CAACS,IAAI,EAAE;EACzB;EAEOG,iBAAiBA,CAAA;IACtB,OAAO,IAAI,CAACd,IAAI,CAACe,MAAM,CAAC,CAACC,KAAK,EAAER,IAAI,KAAKQ,KAAK,GAAGR,IAAI,CAACH,QAAQ,EAAE,CAAC,CAAC;EACpE;EAEOY,aAAaA,CAAA;IAClB,OAAO,IAAI,CAACjB,IAAI,CAACe,MAAM,CAAC,CAACC,KAAK,EAAER,IAAI,KAAKQ,KAAK,GAAIR,IAAI,CAACJ,QAAQ,CAACc,KAAK,GAAGV,IAAI,CAACH,QAAS,EAAE,CAAC,CAAC;EAC5F;EAEOc,UAAUA,CAAA;IACf,MAAMC,IAAI,GAAG,IAAI,CAACrB,WAAW,CAACsB,cAAc,EAAE;IAC9C,MAAMC,YAAY,GAAG,IAAI,CAACtB,IAAI,CAACuB,GAAG,CAACf,IAAI,KAAK;MAC1CgB,YAAY,EAAEhB,IAAI,CAACJ,QAAQ,CAACK,EAAE;MAC9BJ,QAAQ,EAAEG,IAAI,CAACH,QAAQ;MACvBoB,WAAW,EAAEjB,IAAI,CAACJ,QAAQ,CAACc,KAAK,GAAGV,IAAI,CAACH;KACzC,CAAC,CAAC;IAEH,MAAMqB,SAAS,GAAG;MAChBC,OAAO,EAAEP,IAAI,CAACX,EAAE;MAChBmB,UAAU,EAAEN,YAAY;MACxBG,WAAW,EAAE,IAAI,CAACR,aAAa;KAChC;IACD,OAAO,IAAI,CAACnB,IAAI,CAAC+B,IAAI,CAAC,aAAa,EAAEH,SAAS,CAAC;EACjD;EAAC,QAAAI,CAAA,G;qBAjDUlC,WAAW,EAAAmC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,WAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAXzC,WAAW;IAAA0C,OAAA,EAAX1C,WAAW,CAAA2C,IAAA;IAAAC,UAAA,EAFV;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}