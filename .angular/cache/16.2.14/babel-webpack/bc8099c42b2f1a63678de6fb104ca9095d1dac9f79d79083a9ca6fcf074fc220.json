{"ast":null,"code":"import { catchError, tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./notification.service\";\nexport class RestaurantService {\n  constructor(http, notificationService) {\n    this.http = http;\n    this.notificationService = notificationService;\n    this.apiUrl = 'http://localhost:3000/api/restaurants';\n  }\n  // Method to fetch all restaurants\n  getRestaurants() {\n    return this.http.get(this.apiUrl).pipe(catchError(error => {\n      this.notificationService.showError('Failed to fetch restaurant: ' + error.message);\n      throw error;\n    }));\n  }\n  // Method to fetch menu of a specific restaurant\n  getMenu(restaurantId) {\n    return this.http.get(`${this.apiUrl}/${restaurantId}/menu`);\n  }\n  // save restaurants\n  saveRestaurant(restaurant) {\n    return this.http.post(`${this.apiUrl}`, restaurant).pipe(tap(() => this.notificationService.showSuccess('Restaurant added successfully')), catchError(error => {\n      this.notificationService.showError('Failed to add restaurant: ' + error.message);\n      throw error;\n    }));\n  }\n  // update existing restaurant\n  updateRestaurant(id, restaurant) {\n    return this.http.put(`${this.apiUrl}/${id}`, restaurant).pipe(tap(() => this.notificationService.showSuccess('Restaurant update successfully')), catchError(error => {\n      this.notificationService.showError('Failed to update restaurant: ' + error.message);\n      throw error;\n    }));\n  }\n  // for delete restaurant\n  deleteRestaurant(id) {\n    return this.http.delete(`${this.apiUrl}/${id}`).pipe(tap(() => this.notificationService.showSuccess('Restaurant deleted successfully')), catchError(error => {\n      this.notificationService.showError('Failed to delete restaurant: ' + error.message);\n      throw error;\n    }));\n  }\n  static #_ = this.ɵfac = function RestaurantService_Factory(t) {\n    return new (t || RestaurantService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.NotificationService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: RestaurantService,\n    factory: RestaurantService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["catchError","tap","RestaurantService","constructor","http","notificationService","apiUrl","getRestaurants","get","pipe","error","showError","message","getMenu","restaurantId","saveRestaurant","restaurant","post","showSuccess","updateRestaurant","id","put","deleteRestaurant","delete","_","i0","ɵɵinject","i1","HttpClient","i2","NotificationService","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\VI_Pranav\\Desktop\\food-delivery-app\\src\\app\\services\\restaurant.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, catchError, tap } from 'rxjs';\nimport { NotificationService } from './notification.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RestaurantService {\n  private apiUrl = 'http://localhost:3000/api/restaurants';\n\n  constructor(\n    private http: HttpClient,\n    public notificationService: NotificationService\n  ) {}\n\n  // Method to fetch all restaurants\n  public getRestaurants(): Observable<any> {\n    return this.http.get<any[]>(this.apiUrl).pipe(\n      catchError(error => {\n        this.notificationService.showError('Failed to fetch restaurant: ' + error.message);\n        throw error;\n      })\n    );\n  }\n\n  // Method to fetch menu of a specific restaurant\n  public getMenu(restaurantId: string): Observable<any> {\n    return this.http.get(`${this.apiUrl}/${restaurantId}/menu`);\n  }\n\n  // save restaurants\n  public saveRestaurant(restaurant: any): Observable<any>{\n    return this.http.post(`${this.apiUrl}`, restaurant).pipe(\n      tap(() => this.notificationService.showSuccess('Restaurant added successfully')),\n      catchError(error => {\n        this.notificationService.showError('Failed to add restaurant: ' + error.message);\n        throw error;\n      })\n    );\n  }\n\n  // update existing restaurant\n  public updateRestaurant(id: string, restaurant: any): Observable<any>{\n    return this.http.put(`${this.apiUrl}/${id}`, restaurant).pipe(\n      tap(() => this.notificationService.showSuccess('Restaurant update successfully')),\n      catchError(error => {\n        this.notificationService.showError('Failed to update restaurant: ' + error.message);\n        throw error;\n      })\n    );\n  }\n\n  // for delete restaurant\n  public deleteRestaurant(id: string): Observable<any>{\n    return this.http.delete(`${this.apiUrl}/${id}`).pipe(\n      tap(() => this.notificationService.showSuccess('Restaurant deleted successfully')),\n      catchError(error => {\n        this.notificationService.showError('Failed to delete restaurant: ' + error.message);\n        throw error;\n      })\n    );\n  }\n}\n"],"mappings":"AAEA,SAAqBA,UAAU,EAAEC,GAAG,QAAQ,MAAM;;;;AAMlD,OAAM,MAAOC,iBAAiB;EAG5BC,YACUC,IAAgB,EACjBC,mBAAwC;IADvC,KAAAD,IAAI,GAAJA,IAAI;IACL,KAAAC,mBAAmB,GAAnBA,mBAAmB;IAJpB,KAAAC,MAAM,GAAG,uCAAuC;EAKrD;EAEH;EACOC,cAAcA,CAAA;IACnB,OAAO,IAAI,CAACH,IAAI,CAACI,GAAG,CAAQ,IAAI,CAACF,MAAM,CAAC,CAACG,IAAI,CAC3CT,UAAU,CAACU,KAAK,IAAG;MACjB,IAAI,CAACL,mBAAmB,CAACM,SAAS,CAAC,8BAA8B,GAAGD,KAAK,CAACE,OAAO,CAAC;MAClF,MAAMF,KAAK;IACb,CAAC,CAAC,CACH;EACH;EAEA;EACOG,OAAOA,CAACC,YAAoB;IACjC,OAAO,IAAI,CAACV,IAAI,CAACI,GAAG,CAAC,GAAG,IAAI,CAACF,MAAM,IAAIQ,YAAY,OAAO,CAAC;EAC7D;EAEA;EACOC,cAAcA,CAACC,UAAe;IACnC,OAAO,IAAI,CAACZ,IAAI,CAACa,IAAI,CAAC,GAAG,IAAI,CAACX,MAAM,EAAE,EAAEU,UAAU,CAAC,CAACP,IAAI,CACtDR,GAAG,CAAC,MAAM,IAAI,CAACI,mBAAmB,CAACa,WAAW,CAAC,+BAA+B,CAAC,CAAC,EAChFlB,UAAU,CAACU,KAAK,IAAG;MACjB,IAAI,CAACL,mBAAmB,CAACM,SAAS,CAAC,4BAA4B,GAAGD,KAAK,CAACE,OAAO,CAAC;MAChF,MAAMF,KAAK;IACb,CAAC,CAAC,CACH;EACH;EAEA;EACOS,gBAAgBA,CAACC,EAAU,EAAEJ,UAAe;IACjD,OAAO,IAAI,CAACZ,IAAI,CAACiB,GAAG,CAAC,GAAG,IAAI,CAACf,MAAM,IAAIc,EAAE,EAAE,EAAEJ,UAAU,CAAC,CAACP,IAAI,CAC3DR,GAAG,CAAC,MAAM,IAAI,CAACI,mBAAmB,CAACa,WAAW,CAAC,gCAAgC,CAAC,CAAC,EACjFlB,UAAU,CAACU,KAAK,IAAG;MACjB,IAAI,CAACL,mBAAmB,CAACM,SAAS,CAAC,+BAA+B,GAAGD,KAAK,CAACE,OAAO,CAAC;MACnF,MAAMF,KAAK;IACb,CAAC,CAAC,CACH;EACH;EAEA;EACOY,gBAAgBA,CAACF,EAAU;IAChC,OAAO,IAAI,CAAChB,IAAI,CAACmB,MAAM,CAAC,GAAG,IAAI,CAACjB,MAAM,IAAIc,EAAE,EAAE,CAAC,CAACX,IAAI,CAClDR,GAAG,CAAC,MAAM,IAAI,CAACI,mBAAmB,CAACa,WAAW,CAAC,iCAAiC,CAAC,CAAC,EAClFlB,UAAU,CAACU,KAAK,IAAG;MACjB,IAAI,CAACL,mBAAmB,CAACM,SAAS,CAAC,+BAA+B,GAAGD,KAAK,CAACE,OAAO,CAAC;MACnF,MAAMF,KAAK;IACb,CAAC,CAAC,CACH;EACH;EAAC,QAAAc,CAAA,G;qBAtDUtB,iBAAiB,EAAAuB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,mBAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAjB7B,iBAAiB;IAAA8B,OAAA,EAAjB9B,iBAAiB,CAAA+B,IAAA;IAAAC,UAAA,EAFhB;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}